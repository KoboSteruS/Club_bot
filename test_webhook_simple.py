#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç webhook'–∞ CryptoBot.
–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –≤ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç webhook.
"""

import asyncio
import aiohttp
import json
from datetime import datetime
from config.settings import get_settings
from app.core.database import get_db_session
from app.services.payment_service import PaymentService
from app.services.user_service import UserService
from app.schemas.payment import PaymentCreate

async def create_test_payment():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    settings = get_settings()
    
    async with get_db_session() as session:
        payment_service = PaymentService(session)
        user_service = UserService(session)
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
        user = await user_service.get_user_by_telegram_id(1670311707)
        if not user:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return None
            
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
        payment_data = PaymentCreate(
            user_id=str(user.id),
            amount=0.1,
            currency="USDT",
            description="–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è webhook",
            external_id="test_invoice_123",
            tariff_type="monthly"
        )
        
        payment = await payment_service.create_payment(payment_data)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂: {payment.id}")
        return payment

async def test_webhook():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook endpoint."""
    settings = get_settings()
    
    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
    payment = await create_test_payment()
    if not payment:
        return
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CryptoBot
    test_payment_data = {
        "update_id": 123456789,
        "update_type": "invoice_paid",
        "request_date": datetime.now().isoformat(),
        "payload": {
            "invoice_id": "test_invoice_123",
            "status": "paid",
            "asset": "USDT",
            "amount": "0.1",
            "order_description": "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –∫–ª—É–±–∞ –û–°–ù–û–í–ê –ü–£–¢–ò",
            "created_at": datetime.now().isoformat(),
            "paid_at": datetime.now().isoformat(),
            "payload": "monthly"
        }
    }
    
    webhook_url = f"http://localhost:{settings.WEBHOOK_PORT}/webhook/cryptobot"
    
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º webhook: {webhook_url}")
    print(f"üìä –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞:")
    print(json.dumps(test_payment_data, indent=2, ensure_ascii=False))
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                webhook_url,
                json=test_payment_data,
                headers={"Content-Type": "application/json"}
            ) as response:
                print(f"\nüì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
                response_text = await response.text()
                print(f"üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response_text}")
                
                if response.status == 200:
                    print("‚úÖ Webhook —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
                else:
                    print("‚ùå Webhook –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ webhook: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook —Å —Ç–µ—Å—Ç–æ–≤—ã–º –ø–ª–∞—Ç–µ–∂–æ–º...\n")
    
    await test_webhook()
    
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main())
