#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤–º–µ—Å—Ç–µ —Å webhook —Å–µ—Ä–≤–µ—Ä–æ–º.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç:
1. Telegram –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
2. HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook'–æ–≤ –æ—Ç CryptoBot
"""

import asyncio
import sys
import signal
from pathlib import Path
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent))

from app.core.config import get_settings
from app.core.database import init_database
from app.bot.bot import TelegramBot
from app.webhook_server import WebhookServer
from loguru import logger


class BotWithWebhookRunner:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å webhook —Å–µ—Ä–≤–µ—Ä–æ–º."""
    
    def __init__(self):
        self.settings = get_settings()
        self.bot: Optional[TelegramBot] = None
        self.webhook_server: Optional[WebhookServer] = None
        self.running = False
        
    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ webhook —Å–µ—Ä–≤–µ—Ä–∞."""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ ClubBot —Å Webhook —Å–µ—Ä–≤–µ—Ä–æ–º...")
            logger.info(f"üì± –ù–∞–∑–≤–∞–Ω–∏–µ: {self.settings.BOT_NAME}")
            logger.info(f"üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {self.settings.DEBUG}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await init_database()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
            self.bot = TelegramBot()
            await self.bot.start()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            bot_info = await self.bot.get_me()
            bot_username = bot_info.get("username", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            logger.info(f"ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{bot_username}")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞
            self.webhook_server = WebhookServer(
                host=self.settings.WEBHOOK_HOST,
                port=self.settings.WEBHOOK_PORT
            )
            await self.webhook_server.start()
            
            self.running = True
            logger.info("üéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook URL
            if self.settings.WEBHOOK_URL:
                logger.info(f"üîó –í–Ω–µ—à–Ω–∏–π webhook URL: {self.settings.WEBHOOK_URL}/webhook/cryptobot")
            else:
                logger.info(f"üîó –õ–æ–∫–∞–ª—å–Ω—ã–π webhook URL: http://localhost:{self.settings.WEBHOOK_PORT}/webhook/cryptobot")
                logger.warning("‚ö†Ô∏è  –î–ª—è production —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ WEBHOOK_URL –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!")
            
            # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            while self.running:
                await asyncio.sleep(1)
                
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
            raise
            
    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        self.running = False
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞
        if self.bot:
            await self.bot.stop()
            logger.info("‚úÖ Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞  
        if self.webhook_server:
            await self.webhook_server.stop()
            logger.info("‚úÖ Webhook —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        logger.info("üëã –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
    def handle_signal(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏."""
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞...")
        asyncio.create_task(self.stop())


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    runner = BotWithWebhookRunner()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, runner.handle_signal)
    signal.signal(signal.SIGTERM, runner.handle_signal)
    
    try:
        await runner.start()
    except KeyboardInterrupt:
        logger.info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        await runner.stop()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã ClubBot –∑–∞–≤–µ—Ä—à–µ–Ω")
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        sys.exit(1)
