"""
HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook'–æ–≤ –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook'–∏ –æ—Ç:
- CryptoBot (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ)
- –î—Ä—É–≥–∏–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
"""

import asyncio
import hmac
import hashlib
import json
from typing import Dict, Any, Optional
from aiohttp import web, ClientSession
from loguru import logger

from app.core.config import get_settings
from app.bot.handlers.webhook import process_cryptobot_webhook


class WebhookServer:
    """HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook'–æ–≤."""
    
    def __init__(self, host: str = "0.0.0.0", port: int = 8000):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞.
        
        Args:
            host: –•–æ—Å—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
            port: –ü–æ—Ä—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
        """
        self.host = host
        self.port = port
        self.app = web.Application()
        self.settings = get_settings()
        self._setup_routes()
        
    def _setup_routes(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤."""
        self.app.router.add_post('/webhook/cryptobot', self.handle_cryptobot_webhook)
        self.app.router.add_get('/health', self.health_check)
        self.app.router.add_get('/', self.root_handler)
        
    async def root_handler(self, request: web.Request) -> web.Response:
        """–ö–æ—Ä–Ω–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫."""
        return web.json_response({
            "status": "ok",
            "service": "ClubBot Webhook Server",
            "version": "1.0.0"
        })
        
    async def health_check(self, request: web.Request) -> web.Response:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞."""
        return web.json_response({
            "status": "healthy",
            "timestamp": asyncio.get_event_loop().time()
        })
        
    def _verify_cryptobot_signature(self, body: bytes, signature: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook'–∞ –æ—Ç CryptoBot.
        
        Args:
            body: –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            signature: –ü–æ–¥–ø–∏—Å—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –≤–∞–ª–∏–¥–Ω–∞
        """
        try:
            # CryptoBot –∏—Å–ø–æ–ª—å–∑—É–µ—Ç HMAC-SHA256 —Å —Å–µ–∫—Ä–µ—Ç–Ω—ã–º –∫–ª—é—á–æ–º
            secret = self.settings.CRYPTOBOT_TOKEN.encode()
            expected_signature = hmac.new(
                secret, 
                body, 
                hashlib.sha256
            ).hexdigest()
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∏
            return hmac.compare_digest(signature, expected_signature)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ CryptoBot: {e}")
            return False
            
    async def handle_cryptobot_webhook(self, request: web.Request) -> web.Response:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook'–∞ –æ—Ç CryptoBot.
        
        Args:
            request: HTTP –∑–∞–ø—Ä–æ—Å
            
        Returns:
            web.Response: HTTP –æ—Ç–≤–µ—Ç
        """
        try:
            # –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            body = await request.read()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            signature = request.headers.get('crypto-pay-api-signature', '')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å (–≤ production –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!)
            if not self._verify_cryptobot_signature(body, signature):
                logger.warning("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook CryptoBot")
                # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏
                # return web.Response(status=401, text="Invalid signature")
                
            # –ü–∞—Ä—Å–∏–º JSON
            try:
                webhook_data = json.loads(body.decode('utf-8'))
            except json.JSONDecodeError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON webhook CryptoBot: {e}")
                return web.Response(status=400, text="Invalid JSON")
                
            logger.info(f"–ü–æ–ª—É—á–µ–Ω webhook CryptoBot: {webhook_data.get('update_type')}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º webhook
            success = await process_cryptobot_webhook(webhook_data)
            
            if success:
                logger.info("Webhook CryptoBot –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                return web.json_response({"status": "ok"})
            else:
                logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook CryptoBot")
                return web.Response(status=500, text="Processing failed")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_cryptobot_webhook: {e}")
            return web.Response(status=500, text="Internal server error")
            
    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞."""
        logger.info(f"üåê –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {self.host}:{self.port}")
        
        runner = web.AppRunner(self.app)
        await runner.setup()
        
        site = web.TCPSite(runner, self.host, self.port)
        await site.start()
        
        logger.info(f"‚úÖ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://{self.host}:{self.port}")
        logger.info(f"üìã CryptoBot webhook: http://{self.host}:{self.port}/webhook/cryptobot")
        
    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞."""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞...")
        await self.app.cleanup()
        logger.info("‚úÖ Webhook —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
async def run_webhook_server(host: str = "0.0.0.0", port: int = 8000) -> None:
    """
    –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞.
    
    Args:
        host: –•–æ—Å—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏
        port: –ü–æ—Ä—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏
    """
    server = WebhookServer(host, port)
    await server.start()
    
    try:
        # –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
        while True:
            await asyncio.sleep(1)
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    finally:
        await server.stop()


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞–ø—Ä—è–º—É—é
    asyncio.run(run_webhook_server())
