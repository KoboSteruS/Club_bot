"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏.

–°–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
"""

from typing import List, Optional, Dict, Any
from datetime import datetime, timedelta
from sqlalchemy import select, and_, or_
from sqlalchemy.ext.asyncio import AsyncSession
from loguru import logger

from app.models.user import User
from app.models.payment import Payment, PaymentStatus


class ReminderService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏."""
    
    def __init__(self, session: AsyncSession):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
        self.session = session
    
    async def get_users_needing_reminder(self, days_before: int = 3) -> List[User]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ."""
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            reminder_date = datetime.now() + timedelta(days=days_before)
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
            stmt = select(User).join(Payment).where(
                and_(
                    Payment.status == PaymentStatus.PAID,
                    Payment.subscription_end <= reminder_date,
                    Payment.subscription_end > datetime.now(),
                    User.is_active == True
                )
            )
            
            result = await self.session.execute(stmt)
            users = result.scalars().all()
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏")
            return users
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
            return []
    
    async def get_reminder_message(self, user: User, days_left: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if days_left == 1:
            message = f"""
‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è <b>–∑–∞–≤—Ç—Ä–∞</b>.

–ß—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–ª—É–±—É, –ø—Ä–æ–¥–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É —Å–µ–π—á–∞—Å.

üéØ <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è:</b>
‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∏—Ç—É–∞–ª–æ–≤ –Ø–î–†–ê
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É —á–∞—Ç—É
‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?
"""
        elif days_left <= 3:
            message = f"""
‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ <b>{days_left} –¥–Ω—è</b>.

–ß—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–ª—É–±—É, –ø—Ä–æ–¥–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É —Å–µ–π—á–∞—Å.

üéØ <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è:</b>
‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∏—Ç—É–∞–ª–æ–≤ –Ø–î–†–ê
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É —á–∞—Ç—É
‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?
"""
        else:
            message = f"""
‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ <b>{days_left} –¥–Ω–µ–π</b>.

–ß—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–ª—É–±—É, –ø—Ä–æ–¥–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É —Å–µ–π—á–∞—Å.

üéØ <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è:</b>
‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∏—Ç—É–∞–ª–æ–≤ –Ø–î–†–ê
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É —á–∞—Ç—É
‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?
"""
        
        return message
    
    async def get_enabled_reminders_count(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
        try:
            # –°—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
            stmt = select(User).join(Payment).where(
                and_(
                    Payment.status == PaymentStatus.PAID,
                    Payment.subscription_end > datetime.now(),
                    User.is_active == True
                )
            )
            
            result = await self.session.execute(stmt)
            users = result.scalars().all()
            
            return len(users)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            return 0
    
    async def get_expired_subscriptions(self) -> List[User]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏."""
        try:
            stmt = select(User).join(Payment).where(
                and_(
                    Payment.status == PaymentStatus.PAID,
                    Payment.subscription_end < datetime.now(),
                    User.is_active == True
                )
            )
            
            result = await self.session.execute(stmt)
            users = result.scalars().all()
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏")
            return users
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏: {e}")
            return []
    
    async def deactivate_expired_users(self) -> int:
        """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏."""
        try:
            expired_users = await self.get_expired_subscriptions()
            
            for user in expired_users:
                user.is_active = False
                user.updated_at = datetime.now()
                logger.info(f"–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} (–∏—Å—Ç–µ–∫–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∞)")
            
            await self.session.commit()
            logger.info(f"–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {len(expired_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return len(expired_users)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            await self.session.rollback()
            return 0
    
    async def get_subscription_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫."""
        try:
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            active_stmt = select(User).join(Payment).where(
                and_(
                    Payment.status == PaymentStatus.PAID,
                    Payment.subscription_end > datetime.now(),
                    User.is_active == True
                )
            )
            active_result = await self.session.execute(active_stmt)
            active_users = active_result.scalars().all()
            
            # –ò—Å—Ç–µ–∫–∞—é—â–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏
            week_later = datetime.now() + timedelta(days=7)
            expiring_stmt = select(User).join(Payment).where(
                and_(
                    Payment.status == PaymentStatus.PAID,
                    Payment.subscription_end <= week_later,
                    Payment.subscription_end > datetime.now(),
                    User.is_active == True
                )
            )
            expiring_result = await self.session.execute(expiring_stmt)
            expiring_users = expiring_result.scalars().all()
            
            # –ò—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
            expired_stmt = select(User).join(Payment).where(
                and_(
                    Payment.status == PaymentStatus.PAID,
                    Payment.subscription_end < datetime.now(),
                    User.is_active == True
                )
            )
            expired_result = await self.session.execute(expired_stmt)
            expired_users = expired_result.scalars().all()
            
            return {
                "active_subscriptions": len(active_users),
                "expiring_soon": len(expiring_users),
                "expired": len(expired_users),
                "total_users": len(active_users) + len(expired_users)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
            return {
                "active_subscriptions": 0,
                "expiring_soon": 0,
                "expired": 0,
                "total_users": 0
            }
    
    async def send_renewal_reminder(self, user: User, days_left: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏."""
        try:
            message = await self.get_reminder_message(user, days_left)
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ TelegramService
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id} ({days_left} –¥–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è)")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
            return False




