"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API.

–°–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, —Ä–∞–±–æ—Ç—ã —Å –≥—Ä—É–ø–ø–∞–º–∏ –∏ –∫–∞–Ω–∞–ª–∞–º–∏.
"""

from typing import Optional, List, Dict, Any
from telegram import Bot, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.error import TelegramError
from loguru import logger

import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent.parent))
from config.settings import settings


class TelegramService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API."""
    
    def __init__(self, bot: Bot):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
        self.bot = bot
    
    async def send_message(
        self, 
        chat_id: int, 
        text: str, 
        reply_markup: Optional[InlineKeyboardMarkup] = None,
        parse_mode: str = "HTML"
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç."""
        try:
            await self.bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
            return True
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {chat_id}: {e}")
            return False
    
    async def send_welcome_message(self, user_id: int, username: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        message = f"""
üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–± ¬´–û–°–ù–û–í–ê –ü–£–¢–ò¬ª!</b>

–ü—Ä–∏–≤–µ—Ç, {username}! üëã

–¢—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ:
‚Ä¢ –†–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ —Å–æ–±–æ–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
‚Ä¢ –î–æ—Å—Ç–∏–≥–∞—é—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏

<b>–ß—Ç–æ —Ç–µ–±—è –∂–¥–µ—Ç:</b>
üßò –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–∏—Ç—É–∞–ª—ã –Ø–î–†–ê
üìù –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
üéØ –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π
üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞

–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –ø—É—Ç—å –∫ –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–∏ —Å–µ–±—è? üöÄ
"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å", callback_data="start_journey")],
            [InlineKeyboardButton("‚ÑπÔ∏è –û –∫–ª—É–±–µ", callback_data="about_club")],
            [InlineKeyboardButton("üí≥ –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="subscription")]
        ])
        
        return await self.send_message(user_id, message, keyboard)
    
    async def send_report_reminder(self, user_id: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ—Ç—á–µ—Ç–µ."""
        message = """
üìä <b>–í—Ä–µ–º—è –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥ –¥–Ω—è</b>

–ù–∞–ø–∏—à–∏, —á—Ç–æ –ø—Ä–æ–∂–∏–ª, —á—Ç–æ –ø–æ–Ω—è–ª, –≥–¥–µ –¥–æ—Ç—è–Ω—É–ª, –≥–¥–µ —Å–¥–∞–ª—Å—è.

–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ:
‚Ä¢ –û—Å–æ–∑–Ω–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
‚Ä¢ –í—ã—è–≤–∏—Ç—å —Ç–æ—á–∫–∏ —Ä–æ—Å—Ç–∞
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é
‚Ä¢ –û—Å—Ç–∞—Ç—å—Å—è –≤ —Ä–∏—Ç–º–µ

–ì–æ—Ç–æ–≤ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è?
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìù –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", callback_data="report_submitted")],
            [InlineKeyboardButton("üß© –ù–µ –≥–æ—Ç–æ–≤ –¥–µ–ª–∏—Ç—å—Å—è", callback_data="report_skip")]
        ])
        
        return await self.send_message(user_id, message, keyboard)
    
    async def send_goal_reminder(self, user_id: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ü–µ–ª–∏."""
        message = """
üéØ <b>–¶–µ–ª—å –Ω–∞ –Ω–µ–¥–µ–ª—é</b>

–ö–∞–∫–∞—è —Ç–≤–æ—è —Ü–µ–ª—å –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é? –û–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–¥–≤–∏–Ω–µ—Ç —Ç–µ–±—è –Ω–∞ 10 —à–∞–≥–æ–≤ –≤–ø–µ—Ä—ë–¥.
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üéØ –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª—å", callback_data="set_goal")],
            [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_goal")]
        ])
        
        return await self.send_message(user_id, message, keyboard)
    
    async def send_ritual_message(
        self, 
        user_id: int, 
        ritual_type: str, 
        message: str,
        buttons: List[Dict[str, str]]
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–∏—Ç—É–∞–ª–µ."""
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(btn["text"], callback_data=btn["callback"])]
            for btn in buttons
        ])
        
        return await self.send_message(user_id, message, keyboard)
    
    async def send_warmup_message(
        self, 
        user_id: int, 
        message: str,
        buttons: Optional[List[Dict[str, str]]] = None
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞."""
        keyboard = None
        if buttons:
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(btn["text"], callback_data=btn["callback"])]
                for btn in buttons
            ])
        
        return await self.send_message(user_id, message, keyboard)
    
    async def send_admin_activity_report(self, stats: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω—É."""
        message = f"""
üìà <b>–û—Ç—á–µ—Ç –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>

<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {stats.get('active_count', 0)}
‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {stats.get('inactive_count', 0)}
‚Ä¢ –û–±—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats.get('activity_percentage', 0)}%

<b>–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö:</b>
{stats.get('top_users', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}

<b>–ü–æ–¥–∫–ª—é—á–∞—é—â–∏–µ—Å—è:</b>
{stats.get('inactive_users', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}
"""
        
        return await self.send_message(settings.SUPER_ADMIN_ID, message)
    
    async def send_public_activity_report(self, stats: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
        message = f"""
üìä <b>–ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>

<b>–¢–æ–ø –≤–∫–ª—é—á—ë–Ω–Ω—ã—Ö:</b> {stats.get('active_users', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}
<b>–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è:</b> {stats.get('inactive_users', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}

–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {stats.get('active_count', 0)}
‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {stats.get('inactive_count', 0)}
‚Ä¢ –û–±—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats.get('activity_percentage', 0)}%
"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
        if settings.GROUP_ID:
            return await self.send_message(int(settings.GROUP_ID), message)
        return False
    
    async def send_message_to_group(self, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É."""
        if settings.GROUP_ID:
            return await self.send_message(int(settings.GROUP_ID), message)
        return False
    
    async def check_user_subscription(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª."""
        if not settings.CHANNEL_ID:
            return True  # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å
        
        try:
            member = await self.bot.get_chat_member(
                chat_id=int(settings.CHANNEL_ID),
                user_id=user_id
            )
            return member.status in ['member', 'administrator', 'creator']
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")
            return False
    
    async def send_subscription_required_message(self, user_id: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏."""
        message = f"""
üîí <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞</b>

–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –∫–ª—É–±–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª:
@{settings.CHANNEL_USERNAME}

–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É".
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{settings.CHANNEL_USERNAME}")],
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
        ])
        
        return await self.send_message(user_id, message, keyboard)
    
    async def send_payment_message(self, user_id: int, amount: int, description: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ."""
        message = f"""
üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>

<b>–°—É–º–º–∞:</b> {amount} ‚ÇΩ
<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data="payment_card")],
            [InlineKeyboardButton("üì± –°–ë–ü", callback_data="payment_sbp")],
            [InlineKeyboardButton("üí∞ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏", callback_data="payment_wallet")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="payment_cancel")]
        ])
        
        return await self.send_message(user_id, message, keyboard)
    
    async def send_payment_success_message(self, user_id: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ."""
        message = """
‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–± ¬´–û–°–ù–û–í–ê –ü–£–¢–ò¬ª!

üéØ <b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>
‚Ä¢ –¢—ã –ø–æ–ª—É—á–∏—à—å –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É —á–∞—Ç—É
‚Ä¢ –ë—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–∏—Ç—É–∞–ª—ã –Ø–î–†–ê
‚Ä¢ –°–º–æ–∂–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞—Ö
‚Ä¢ –ü–æ–ª—É—á–∏—à—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É

–ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ–º! üöÄ
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å", callback_data="start_journey")]
        ])
        
        return await self.send_message(user_id, message, keyboard)
    
    async def send_payment_failed_message(self, user_id: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ–ø–ª–∞—Ç–µ."""
        message = """
‚ùå <b>–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞</b>

–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.

–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="payment_retry")],
            [InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
        ])
        
        return await self.send_message(user_id, message, keyboard)



