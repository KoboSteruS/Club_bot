"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API.

–°–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, —Ä–∞–±–æ—Ç—ã —Å –≥—Ä—É–ø–ø–∞–º–∏ –∏ –∫–∞–Ω–∞–ª–∞–º–∏.
"""

from datetime import datetime
from typing import Optional, List, Dict, Any
from telegram import Bot, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.error import TelegramError
from loguru import logger

import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent.parent))
from config.settings import settings


class TelegramService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API."""
    
    def __init__(self, bot: Bot):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
        self.bot = bot
        # –ö—ç—à –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (user_id -> (is_subscribed, timestamp))
        self.subscription_cache = {}
        self.cache_ttl = 300  # 5 –º–∏–Ω—É—Ç
    
    def clear_subscription_cache(self, user_id: int = None):
        """
        –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø–æ–¥–ø–∏—Å–∫–∏.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏, None –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ–≥–æ –∫—ç—à–∞
        """
        if user_id:
            self.subscription_cache.pop(user_id, None)
            logger.info(f"–û—á–∏—â–µ–Ω –∫—ç—à –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            self.subscription_cache.clear()
            logger.info("–û—á–∏—â–µ–Ω –≤–µ—Å—å –∫—ç—à –ø–æ–¥–ø–∏—Å–∫–∏")
    
    async def send_message(
        self, 
        chat_id: int, 
        text: str, 
        reply_markup: Optional[InlineKeyboardMarkup] = None,
        parse_mode: str = "HTML"
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç."""
        try:
            await self.bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            return True
        except TelegramError as e:
            # –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            if "bot can't initiate conversation" in str(e):
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ –ø–∏—Å–∞–ª –±–æ—Ç—É –ø–µ—Ä–≤—ã–º - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É")
            elif "chat not found" in str(e):
                logger.warning(f"–ß–∞—Ç {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ —É–¥–∞–ª–∏–ª –∞–∫–∫–∞—É–Ω—Ç")
            elif "blocked" in str(e).lower():
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
            return False
    
    async def send_welcome_message(self, user_id: int, username: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó."""
        message = f"""
üî• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–± ¬´–û–°–ù–û–í–ê –ü–£–¢–ò¬ª!

–ü—Ä–∏–≤–µ—Ç, {username}! üëã

–¢—ã –ø–æ–ø–∞–ª –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–ª—É–± –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ:
‚Ä¢ –ë–µ—Ä—É—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Å–≤–æ—é –∂–∏–∑–Ω—å
‚Ä¢ –†–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ —Å–æ–±–æ–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å  
‚Ä¢ –î–æ—Å—Ç–∏–≥–∞—é—Ç –∞–º–±–∏—Ü–∏–æ–∑–Ω—ã—Ö —Ü–µ–ª–µ–π
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏

–ß—Ç–æ —Ç–µ–±—è –∂–¥–µ—Ç –≤ –∫–ª—É–±–µ:
üßò –†–∏—Ç—É–∞–ª—ã –Ø–î–†–ê –¥–ª—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
üìù –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã (21:00)
üéØ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏ –∏ –∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
üìä –ê–Ω–∞–ª–∏–∑ —Ç–≤–æ–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–ª—É–±—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
1Ô∏è‚É£ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª
2Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –∫–ª—É–±–µ
3Ô∏è‚É£ –°–æ–±–ª—é–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

–ì–æ—Ç–æ–≤ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ø–î–†–£? üöÄ
"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")],
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="payment_options")],
            [InlineKeyboardButton("üìò –£–∑–Ω–∞—Ç—å –æ –∫–ª—É–±–µ", callback_data="about_club")]
        ])
        
        return await self.send_message(user_id, message, keyboard)
    
    async def send_subscription_active_message(
        self, 
        user_id: int, 
        username: str, 
        subscription_until: datetime,
        reply_to_message=None
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π."""
        message = f"""
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {username}!

–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–ª—É–± ¬´–û–°–ù–û–í–ê –ü–£–¢–ò¬ª –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {subscription_until.strftime('%d.%m.%Y')}.

–ü—Ä–æ–¥–æ–ª–∂–∞–π —Å–≤–æ–π –ø—É—Ç—å –∫ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏! üí™

–ß—Ç–æ —Ç–µ–±—è –∂–¥–µ—Ç –≤ –∫–ª—É–±–µ:
üìù –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã (21:00)
üéØ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏ (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
üí¨ –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–π –≥—Ä—É–ø–ø–µ
üìä –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ü—Ä–æ—Å—Ç–æ —Å–ª–µ–¥–∏ –∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏!
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí¨ –ì—Ä—É–ø–ø–∞ –∫–ª—É–±–∞", url="https://t.me/+hWoFGCMcaI83YTY0")],
            [InlineKeyboardButton("‚ÑπÔ∏è –û –∫–ª—É–±–µ", callback_data="about_club")]
        ])
        
        if reply_to_message:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º reply_text
            try:
                await reply_to_message.reply_text(message, reply_markup=keyboard)
                return True
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ reply —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                return False
        else:
            return await self.send_message(user_id, message, keyboard)
    
    async def send_payment_required_message(self, user_id: int, reply_to_message=None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã."""
        message = """
üí≥ –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ —É—á–∞—Å—Ç–∏—è

–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–ª—É–±.

–ß—Ç–æ –¥–∞—Å—Ç –æ–ø–ª–∞—á–µ–Ω–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ:
üßò –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–∏—Ç—É–∞–ª—ã –Ø–î–†–ê
üìù –°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ (21:00)
üéØ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏
üí¨ –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–π –≥—Ä—É–ø–ø–µ
üìä –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

–ì–æ—Ç–æ–≤ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø?
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ", callback_data="payment_options")],
            [InlineKeyboardButton("‚ÑπÔ∏è –û –∫–ª—É–±–µ", callback_data="about_club")]
        ])
        
        if reply_to_message:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º reply_text
            try:
                await reply_to_message.reply_text(message, reply_markup=keyboard)
                return True
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ reply —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                return False
        else:
            return await self.send_message(user_id, message, keyboard)
    
    async def send_report_reminder(self, user_id: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ—Ç—á–µ—Ç–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó."""
        message = """
üìä –í—Ä–µ–º—è –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥ –¥–Ω—è

–ù–∞–ø–∏—à–∏, —á—Ç–æ –ø—Ä–æ–∂–∏–ª, —á—Ç–æ –ø–æ–Ω—è–ª, –≥–¥–µ –¥–æ—Ç—è–Ω—É–ª, –≥–¥–µ —Å–¥–∞–ª—Å—è.

–ú–æ–∂–µ—à—å –æ—Ç–≤–µ—á–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É:
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìù –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", callback_data="report_submitted")],
            [InlineKeyboardButton("üß© –ù–µ –≥–æ—Ç–æ–≤ –¥–µ–ª–∏—Ç—å—Å—è", callback_data="report_skip")]
        ])
        
        return await self.send_message(user_id, message, keyboard)
    
    async def send_about_club_message(self, user_id: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—É–±–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó."""
        message = """
üìò –û –∫–ª—É–±–µ ¬´–û–°–ù–û–í–ê –ü–£–¢–ò¬ª

–ß—Ç–æ —Ç–∞–∫–æ–µ –Ø–î–†–û?
–≠—Ç–æ –∑–∞–∫—Ä—ã—Ç–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä—å—ë–∑–Ω–æ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ —Å–≤–æ–µ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é –∏ –≥–æ—Ç–æ–≤—ã —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —Å–æ–±–æ–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.

–ü—Ä–∏–Ω—Ü–∏–ø—ã –∫–ª—É–±–∞:
üî• –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ
üìà –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ä–æ—Å—Ç –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ  
üí™ –í–∑–∞–∏–º–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è
üéØ –§–æ–∫—É—Å –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
‚ö° –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å

–ß—Ç–æ –¥–∞—ë—Ç —É—á–∞—Å—Ç–∏–µ:
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–∏—Ç—É–∞–ª—ã –Ø–î–†–ê –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏ –∏ –∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è

–ü—Ä–∞–≤–∏–ª–∞ –∫–ª—É–±–∞:
1Ô∏è‚É£ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª
2Ô∏è‚É£ –ê–∫—Ç–∏–≤–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏
3Ô∏è‚É£ –£–≤–∞–∂–µ–Ω–∏–µ –∫ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
4Ô∏è‚É£ –§–æ–∫—É—Å –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–∏, –∞ –Ω–µ –Ω–∞ –∂–∞–ª–æ–±–∞—Ö

–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è:
üíé 1 –º–µ—Å—è—Ü - 2990‚ÇΩ
üíé 3 –º–µ—Å—è—Ü–∞ - 7990‚ÇΩ (—Å–∫–∏–¥–∫–∞ 10%)
üíé –ü–æ–¥–ø–∏—Å–∫–∞ - 29990‚ÇΩ (—Å–∫–∏–¥–∫–∞ 15%)

–ì–æ—Ç–æ–≤ —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –Ø–î–†–ê? üí™
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")],
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="payment_options")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ])
        
        return await self.send_message(user_id, message, keyboard)
    
    async def send_about_club_message_for_subscribers(self, user_id: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—É–±–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π."""
        message = """
üìò –û –∫–ª—É–±–µ ¬´–û–°–ù–û–í–ê –ü–£–¢–ò¬ª

–ß—Ç–æ —Ç–∞–∫–æ–µ –Ø–î–†–û?
–≠—Ç–æ –∑–∞–∫—Ä—ã—Ç–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä—å—ë–∑–Ω–æ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ —Å–≤–æ–µ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é –∏ –≥–æ—Ç–æ–≤—ã —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —Å–æ–±–æ–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.

–ü—Ä–∏–Ω—Ü–∏–ø—ã –∫–ª—É–±–∞:
üî• –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ
üìà –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ä–æ—Å—Ç –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ  
üí™ –í–∑–∞–∏–º–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è
üéØ –§–æ–∫—É—Å –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
‚ö° –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å

–ß—Ç–æ –¥–∞—ë—Ç —É—á–∞—Å—Ç–∏–µ:
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã (21:00) –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏ –∏ –∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è

–ü—Ä–∞–≤–∏–ª–∞ –∫–ª—É–±–∞:
1Ô∏è‚É£ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª
2Ô∏è‚É£ –ê–∫—Ç–∏–≤–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏
3Ô∏è‚É£ –£–≤–∞–∂–µ–Ω–∏–µ –∫ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
4Ô∏è‚É£ –§–æ–∫—É—Å –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–∏, –∞ –Ω–µ –Ω–∞ –∂–∞–ª–æ–±–∞—Ö

–¢—ã —É–∂–µ —á–∞—Å—Ç—å –Ø–î–†–ê! –ü—Ä–æ–¥–æ–ª–∂–∞–π —Ä–∞–±–æ—Ç—É –Ω–∞–¥ —Å–æ–±–æ–π! üí™
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí¨ –ì—Ä—É–ø–ø–∞ –∫–ª—É–±–∞", url="https://t.me/+hWoFGCMcaI83YTY0")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ])
        
        return await self.send_message(user_id, message, keyboard)
    
    async def send_goal_reminder(self, user_id: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª–∏ (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)."""
        message = """
üéØ –§–∏–∫—Å–∞—Ü–∏—è –Ω–µ–¥–µ–ª–∏

–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - –≤—Ä–µ–º—è –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏ –ø—Ä–æ—à–µ–¥—à–µ–π –Ω–µ–¥–µ–ª–∏ –∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é.

–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:
‚Ä¢ –ß—Ç–æ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∏—á—å –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?
‚Ä¢ –ö–∞–∫–∏–µ –±—ã–ª–∏ –≥–ª–∞–≤–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã?
‚Ä¢ –ß—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∏ –ø–æ—á–µ–º—É?
‚Ä¢ –ö–∞–∫–∞—è –≥–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é?

–ù–∞–ø–∏—à–∏ —Å–≤–æ—é —Ñ–∏–∫—Å–∞—Ü–∏—é –Ω–µ–¥–µ–ª–∏ –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É:
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìù –§–∏–∫—Å–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", callback_data="goal_submitted")],
            [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="goal_skip")]
        ])
        
        return await self.send_message(user_id, message, keyboard)
    
    async def send_ritual_message(
        self, 
        user_id: int, 
        ritual_type: str, 
        message: str,
        buttons: List[Dict[str, str]]
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–∏—Ç—É–∞–ª–µ."""
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(btn["text"], callback_data=btn["callback"])]
            for btn in buttons
        ])
        
        return await self.send_message(user_id, message, keyboard)
    
    async def send_warmup_message(
        self, 
        user_id: int, 
        message: str,
        buttons: Optional[List[Dict[str, str]]] = None
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞."""
        keyboard = None
        if buttons:
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(btn["text"], callback_data=btn["callback"])]
                for btn in buttons
            ])
        
        return await self.send_message(user_id, message, keyboard)
    
    async def send_admin_activity_report(self, stats: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω—É."""
        message = f"""
üìà –û—Ç—á–µ—Ç –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {stats.get('active_count', 0)}
‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {stats.get('inactive_count', 0)}
‚Ä¢ –û–±—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats.get('activity_percentage', 0)}%

–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö:
{stats.get('top_users', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}

–ü–æ–¥–∫–ª—é—á–∞—é—â–∏–µ—Å—è:
{stats.get('inactive_users', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}
"""
        
        return await self.send_message(settings.SUPER_ADMIN_ID, message)
    
    async def send_public_activity_report(self, stats: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó."""
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        top_active = stats.get('top_active', [])
        top_active_str = ", ".join([f"@{user}" for user in top_active[:3]]) if top_active else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–∞—é—â–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π  
        connecting = stats.get('connecting', [])
        connecting_str = ", ".join([f"@{user}" for user in connecting[:3]]) if connecting else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        message = f"""
üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

–¢–æ–ø –≤–∫–ª—é—á—ë–Ω–Ω—ã—Ö: {top_active_str}
–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è: {connecting_str}

–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–µ—Ä–∂–∞—Ç—å —Ä–∏—Ç–º! üí™
"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –∫–ª—É–±–∞, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
        if settings.GROUP_ID:
            return await self.send_message(int(settings.GROUP_ID), message)
        return False
    
    async def send_message_to_group(self, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É."""
        from config.settings import get_settings
        settings = get_settings()
        if settings.GROUP_ID:
            return await self.send_message(int(settings.GROUP_ID), message)
        return False
    
    async def create_group_invite_link(self, expire_date=None, member_limit=None) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã.
        
        Args:
            expire_date: –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ (datetime)
            member_limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            
        Returns:
            str: –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
        """
        try:
            from config.settings import get_settings
            settings = get_settings()
            
            if not settings.GROUP_ID:
                logger.error("GROUP_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return None
                
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
            invite_link = await self.bot.create_chat_invite_link(
                chat_id=int(settings.GROUP_ID),
                expire_date=expire_date,
                member_limit=member_limit
            )
            
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {settings.GROUP_ID}")
            return invite_link.invite_link
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {e}")
            return None
    
    async def send_message(self, user_id: int, message: str, keyboard=None, parse_mode="HTML") -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            keyboard: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (HTML –∏–ª–∏ Markdown)
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if not self.bot:
                logger.error("Bot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
                
            await self.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode=parse_mode,
                reply_markup=keyboard
            )
            
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False
    
    async def check_user_subscription(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≥—Ä—É–ø–ø—É "–Ø–î–†–û –ö–õ–£–ë–ê / –û–°–ù–û–í–ê PUT–ò" —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            import time
            current_time = time.time()
            if user_id in self.subscription_cache:
                is_subscribed, timestamp = self.subscription_cache[user_id]
                if current_time - timestamp < self.cache_ttl:
                    logger.info(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {is_subscribed}")
                    return is_subscribed
            
            # –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—É "–Ø–î–†–û –ö–õ–£–ë–ê / –û–°–ù–û–í–ê PUT–ò"
            from config.settings import get_settings
            settings = get_settings()
            group_id = settings.GROUP_ID
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –≥—Ä—É–ø–ø—É {group_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –≥—Ä—É–ø–ø–µ —á–µ—Ä–µ–∑ Bot API
            chat_member = await self.bot.get_chat_member(
                chat_id=group_id,
                user_id=user_id
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å: member, administrator, creator = –ø–æ–¥–ø–∏—Å–∞–Ω
            # left, kicked = –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
            is_subscribed = chat_member.status in ['member', 'administrator', 'creator']
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self.subscription_cache[user_id] = (is_subscribed, current_time)
            
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –≥—Ä—É–ø–ø—É {group_id}: —Å—Ç–∞—Ç—É—Å '{chat_member.status}', –ø–æ–¥–ø–∏—Å–∞–Ω: {is_subscribed}")
            return is_subscribed
            
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –≥—Ä—É–ø–ø—É {group_id}: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω –∫–∞–Ω–∞–ª–∞) —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—à–∏–±–∫–∏ –≤ –∫—ç—à –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
            self.subscription_cache[user_id] = (False, current_time)
            return False
    
    async def send_subscription_required_message(self, user_id: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –≥—Ä—É–ø–ø–µ "–Ø–î–†–û –ö–õ–£–ë–ê / –û–°–ù–û–í–ê PUT–ò"."""
        message = """
üîí –¢—Ä–µ–±—É–µ—Ç—Å—è —É—á–∞—Å—Ç–∏–µ –≤ –≥—Ä—É–ø–ø–µ

–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–ª—É–±—É ¬´–û–°–ù–û–í–ê –ü–£–¢–ò¬ª –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä—É–ø–ø–µ:
–Ø–î–†–û –ö–õ–£–ë–ê / –û–°–ù–û–í–ê PUT–ò

–ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç –≤ –≥—Ä—É–ø–ø–µ:
‚Ä¢ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞. –≠–Ω–µ—Ä–≥–∏—è. –î–≤–∏–∂–µ–Ω–∏–µ
‚Ä¢ –ë–µ–∑ –≤–æ–¥—ã. –ë–µ–∑ –≥—É—Ä—É. –ë–µ–∑ –º–∞—Å–æ–∫  
‚Ä¢ –¢–æ–ª—å–∫–æ —Ç—ã, —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ

–ü–æ—Å–ª–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É".
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", url="https://t.me/+hWoFGCMcaI83YTY0")],
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
        ])
        
        return await self.send_message(user_id, message, keyboard)
    
    async def send_payment_message(self, user_id: int, amount: int, description: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ."""
        message = f"""
üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏

–°—É–º–º–∞: {amount} ‚ÇΩ
–û–ø–∏—Å–∞–Ω–∏–µ: {description}

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data="payment_card")],
            [InlineKeyboardButton("üì± –°–ë–ü", callback_data="payment_sbp")],
            [InlineKeyboardButton("üí∞ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏", callback_data="payment_wallet")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="payment_cancel")]
        ])
        
        return await self.send_message(user_id, message, keyboard)
    
    async def send_payment_success_message(self, user_id: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ."""
        message = """
‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–± ¬´–û–°–ù–û–í–ê –ü–£–¢–ò¬ª!

üéØ –ß—Ç–æ –¥–∞–ª—å—à–µ:
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–π –≥—Ä—É–ø–ø–µ –∫–ª—É–±–∞
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã (21:00)
‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏ (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è

–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –°–ª–µ–¥–∏ –∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏!

–ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ–º! üöÄ
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí¨ –ì—Ä—É–ø–ø–∞ –∫–ª—É–±–∞", url="https://t.me/+hWoFGCMcaI83YTY0")],
            [InlineKeyboardButton("‚ÑπÔ∏è –û –∫–ª—É–±–µ", callback_data="about_club")]
        ])
        
        return await self.send_message(user_id, message, keyboard)
    
    async def send_payment_failed_message(self, user_id: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ–ø–ª–∞—Ç–µ."""
        message = """
‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞

–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.

–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="payment_retry")],
            [InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
        ])
        
        return await self.send_message(user_id, message, keyboard)




