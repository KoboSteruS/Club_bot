"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –≥—Ä—É–ø–ø—ã.

–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –∏—Å–∫–ª—é—á–∞–µ—Ç –Ω–µ–æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
"""

import asyncio
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from loguru import logger

from app.core.database import get_db_session
from app.services.user_service import UserService
from app.services.telegram_service import TelegramService
from config.settings import get_settings


class GroupManagementService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –≥—Ä—É–ø–ø—ã."""
    
    def __init__(self, bot=None):
        self.settings = get_settings()
        self.telegram_service = TelegramService(bot) if bot else None
    
    async def check_subscriptions_and_kick_unpaid(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã –∏ –∏—Å–∫–ª—é—á–∞–µ—Ç –Ω–µ–æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö.
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã...")
            
            async with get_db_session() as session:
                user_service = UserService(session)
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ
                group_members = await user_service.get_users_in_group()
                logger.info(f"üë• –ù–∞–π–¥–µ–Ω–æ {len(group_members)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ")
                
                results = {
                    "total_checked": len(group_members),
                    "warnings_sent": 0,
                    "warnings_failed": 0,
                    "kicked_users": 0,
                    "errors": 0,
                    "details": []
                }
                
                for i, user in enumerate(group_members, 1):
                    logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {i}/{len(group_members)}: {user.telegram_id} (@{user.username})")
                    try:
                        await self._process_user_subscription(user, user_service, results)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {e}")
                        results["errors"] += 1
                        results["details"].append({
                            "user_id": user.telegram_id,
                            "action": "error",
                            "message": str(e)
                        })
                
                logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {results}")
                logger.info(f"üîÑ –í—Å–µ –∑–∞–¥–∞—á–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω—ã –≤ —Ñ–æ–Ω–µ, —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
                return results
                
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
            return {
                "total_checked": 0,
                "warnings_sent": 0,
                "kicked_users": 0,
                "errors": 1,
                "details": [{"error": str(e)}]
            }
    
    async def _process_user_subscription(self, user, user_service: UserService, results: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} (@{user.username})")
        logger.info(f"   –°—Ç–∞—Ç—É—Å: {user.status}, Premium: {user.is_premium}, –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {user.subscription_until}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        has_active_subscription = (
            user.status == "active" and 
            user.is_premium and 
            user.subscription_until and 
            user.subscription_until > datetime.utcnow()
        )
        
        if has_active_subscription:
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} (@{user.username}) –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É")
            return
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø–ª–∞—Ç–∏–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} (@{user.username}) –ù–ï –û–ü–õ–ê–ß–ò–í–ê–õ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
        
        warning_sent = await self._send_payment_warning(user)
        if warning_sent:
            results["warnings_sent"] += 1
            results["details"].append({
                "user_id": user.telegram_id,
                "action": "warning_sent",
                "username": user.username
            })
        else:
            results["warnings_failed"] += 1
            results["details"].append({
                "user_id": user.telegram_id,
                "action": "warning_failed",
                "username": user.username
            })
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        logger.info(f"‚è∞ –ü–ª–∞–Ω–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç")
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        import asyncio
        asyncio.create_task(self._schedule_user_kick(user.telegram_id))
    
    async def _send_payment_warning(self, user) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã."""
        try:
            warning_message = f"""‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–ª—É–± ¬´–û–°–ù–û–í–ê –ü–£–¢–ò¬ª –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –Ω–µ –±—ã–ª–∞ –æ–ø–ª–∞—á–µ–Ω–∞.

üïê <b>–£ —Ç–µ–±—è –µ—Å—Ç—å 30 –º–∏–Ω—É—Ç</b> —á—Ç–æ–±—ã:
‚Ä¢ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ($33)
‚Ä¢ –ò–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –≤—ã–¥–∞—á–∏ –¥–æ—Å—Ç—É–ø–∞

–ï—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç —Ç—ã –Ω–µ –æ–ø–ª–∞—Ç–∏—à—å –∏–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—à—å –¥–æ—Å—Ç—É–ø –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —Ç–µ–±—è –∏—Å–∫–ª—é—á–∞—Ç –∏–∑ –≥—Ä—É–ø–ø—ã.

üí≥ <b>–î–ª—è –æ–ø–ª–∞—Ç—ã:</b>
1. –ù–∞–∂–º–∏ /start –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º
2. –í—ã–±–µ—Ä–∏ "–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø - $33"
3. –û–ø–ª–∞—Ç–∏ –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º

üìû <b>–î–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:</b>
–ù–∞–ø–∏—à–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç.

‚è∞ <b>–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏:</b> 30 –º–∏–Ω—É—Ç

–ù–µ —Ç–µ—Ä—è–π –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É! üöÄ"""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            sent = await self.telegram_service.send_message(
                user.telegram_id,
                warning_message,
                parse_mode='HTML'
            )
            
            if sent:
                logger.info(f"üì§ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id} (@{user.username})")
                return True
            else:
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id} (@{user.username}) - –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
            return False
    
    async def _schedule_user_kick(self, telegram_id: int) -> None:
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç."""
        try:
            logger.info(f"‚è≥ –ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} - –æ–∂–∏–¥–∞–Ω–∏–µ 30 –º–∏–Ω—É—Ç...")
            # –ñ–¥–µ–º 30 –º–∏–Ω—É—Ç
            await asyncio.sleep(30 * 60)  # 30 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            logger.info(f"‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} - –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–ø–ª–∞—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è
            await self._kick_user_if_unpaid(telegram_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
    
    async def _kick_user_if_unpaid(self, telegram_id: int) -> None:
        """–ò—Å–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ –æ–ø–ª–∞—Ç–∏–ª."""
        try:
            async with get_db_session() as session:
                user_service = UserService(session)
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user = await user_service.get_user_by_telegram_id(telegram_id)
                
                if not user:
                    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–ø–ª–∞—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è
                has_active_subscription = (
                    user.status == "active" and 
                    user.is_premium and 
                    user.subscription_until and 
                    user.subscription_until > datetime.utcnow()
                )
                
                if has_active_subscription:
                    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É, –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                    return
                
                # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã
                await self._kick_user_from_group(telegram_id)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                from app.schemas.user import UserUpdate
                await user_service.update_user(str(user.id), UserUpdate(
                    is_in_group=False,
                    status="pending"
                ))
                
                logger.info(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
    
    async def _kick_user_from_group(self, telegram_id: int) -> None:
        """–ò—Å–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã."""
        try:
            # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã
            success = await self.telegram_service.kick_chat_member(
                chat_id=int(self.settings.GROUP_ID),
                user_id=telegram_id
            )
            
            if success:
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} —É—Å–ø–µ—à–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã")
            else:
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –∏–∑ –≥—Ä—É–ø–ø—ã")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –∏–∑ –≥—Ä—É–ø–ø—ã: {e}")
    
    async def add_user_to_group(self, telegram_id: int) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—Ä–∞—Ç–Ω–æ –≤ –≥—Ä—É–ø–ø—É.
        
        Args:
            telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            success = await self.telegram_service.unban_chat_member(
                chat_id=int(self.settings.GROUP_ID),
                user_id=telegram_id
            )
            
            if success:
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –¥–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞—Ç–Ω–æ –≤ –≥—Ä—É–ø–ø—É")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                async with get_db_session() as session:
                    user_service = UserService(session)
                    user = await user_service.get_user_by_telegram_id(telegram_id)
                    
                    if user:
                        from app.schemas.user import UserUpdate
                        await user_service.update_user(str(user.id), UserUpdate(
                            is_in_group=True,
                            joined_group_at=datetime.utcnow()
                        ))
            
            return success
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –≤ –≥—Ä—É–ø–ø—É: {e}")
            return False
