"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –≥—Ä—É–ø–ø—ã.

–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –∏—Å–∫–ª—é—á–∞–µ—Ç –Ω–µ–æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
"""

import asyncio
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from loguru import logger

from app.core.database import get_db_session
from app.services.user_service import UserService
from app.services.telegram_service import TelegramService
from config.settings import get_settings


class GroupManagementService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –≥—Ä—É–ø–ø—ã."""
    
    def __init__(self, bot=None):
        self.settings = get_settings()
        self.telegram_service = TelegramService(bot) if bot else None
    
    async def check_subscriptions_and_kick_unpaid(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã –∏ –∏—Å–∫–ª—é—á–∞–µ—Ç –Ω–µ–æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö.
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã...")
            
            async with get_db_session() as session:
                user_service = UserService(session)
                
                # –í–ê–ñ–ù–û: –û—Ç–∫–ª—é—á–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ Telegram API –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –≥—Ä—É–ø–ø–µ
                logger.info("‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ - Telegram API –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ (–ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö)
                group_members = await user_service.get_users_in_group()
                logger.info(f"üë• –ù–∞–π–¥–µ–Ω–æ {len(group_members)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ (–ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö)")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                all_users = await user_service.get_all_users()
                logger.info(f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {len(all_users)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –≥—Ä—É–ø–ø–µ
                # (—Å—Ç–∞—Ç—É—Å active –∏–ª–∏ pending, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç is_in_group)
                potential_group_members = [user for user in all_users if user.status in ['active', 'pending']]
                logger.info(f"üîç –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã: {len(potential_group_members)}")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                if len(potential_group_members) > len(group_members):
                    logger.info(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –±–æ–ª—å—à–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ({len(potential_group_members)}) —á–µ–º –≤ –≥—Ä—É–ø–ø–µ ({len(group_members)})")
                    logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
                    group_members = potential_group_members
                
                results = {
                    "total_checked": len(group_members),
                    "warnings_sent": 0,
                    "warnings_failed": 0,
                    "kicked_users": 0,
                    "errors": 0,
                    "details": []
                }
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                logger.info("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
                for i, user in enumerate(group_members, 1):
                    logger.info(f"  {i}. {user.telegram_id} (@{user.username}) - –°—Ç–∞—Ç—É—Å: {user.status}, Premium: {user.is_premium}, –í –≥—Ä—É–ø–ø–µ: {user.is_in_group}")
                
                for i, user in enumerate(group_members, 1):
                    logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {i}/{len(group_members)}: {user.telegram_id} (@{user.username})")
                    try:
                        await self._process_user_subscription(user, user_service, results)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {e}")
                        results["errors"] += 1
                        results["details"].append({
                            "user_id": user.telegram_id,
                            "action": "error",
                            "message": str(e)
                        })
                
                logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {results}")
                logger.info(f"üîÑ –í—Å–µ –∑–∞–¥–∞—á–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω—ã –≤ —Ñ–æ–Ω–µ, —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
                return results
                
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
            return {
                "total_checked": 0,
                "warnings_sent": 0,
                "kicked_users": 0,
                "errors": 1,
                "details": [{"error": str(e)}]
            }
    
    async def _process_user_subscription(self, user, user_service: UserService, results: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} (@{user.username})")
        logger.info(f"   –°—Ç–∞—Ç—É—Å: {user.status}, Premium: {user.is_premium}, –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {user.subscription_until}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        has_active_subscription = (
            user.status == "active" and 
            user.is_premium and 
            user.subscription_until and 
            user.subscription_until > datetime.utcnow()
        )
        
        if has_active_subscription:
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} (@{user.username}) –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É")
            return
        
        # –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥—Ä—É–ø–ø–µ
        if not user.is_in_group:
            logger.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} (@{user.username}) –Ω–µ –≤ –≥—Ä—É–ø–ø–µ (is_in_group=False), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Telegram API
        try:
            if self.telegram_service and self.telegram_service.bot:
                chat_member = await self.telegram_service.bot.get_chat_member(
                    chat_id=int(self.settings.GROUP_ID),
                    user_id=user.telegram_id
                )
                
                if chat_member.status in ['left', 'kicked']:
                    logger.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} (@{user.username}) –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É (—Å—Ç–∞—Ç—É—Å: {chat_member.status}), –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    user.is_in_group = False
                    user.joined_group_at = None
                    await user_service.session.commit()
                    return
                    
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} –≤ –≥—Ä—É–ø–ø–µ: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ API
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
        today = datetime.utcnow().date()
        last_warning_date = user.last_subscription_check.date() if user.last_subscription_check else None
        
        if last_warning_date == today:
            logger.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id} (@{user.username}) —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø–ª–∞—Ç–∏–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} (@{user.username}) –ù–ï –û–ü–õ–ê–ß–ò–í–ê–õ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
        
        warning_sent = await self._send_payment_warning(user)
        if warning_sent:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            user.last_subscription_check = datetime.utcnow()
            await user_service.session.commit()
            
            results["warnings_sent"] += 1
            results["details"].append({
                "user_id": user.telegram_id,
                "action": "warning_sent",
                "username": user.username
            })
        else:
            results["warnings_failed"] += 1
            results["details"].append({
                "user_id": user.telegram_id,
                "action": "warning_failed",
                "username": user.username
            })
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 –¥–Ω—è (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        logger.info(f"‚è∞ –ü–ª–∞–Ω–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} —á–µ—Ä–µ–∑ 3 –¥–Ω—è")
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        import asyncio
        asyncio.create_task(self._schedule_user_kick(user.telegram_id))
    
    async def _send_payment_warning(self, user) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã."""
        try:
            warning_message = f"""‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–ª—É–± ¬´–û–°–ù–û–í–ê –ü–£–¢–ò¬ª –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –Ω–µ –±—ã–ª–∞ –æ–ø–ª–∞—á–µ–Ω–∞.

üïê <b>–£ —Ç–µ–±—è –µ—Å—Ç—å 3 –¥–Ω—è</b> —á—Ç–æ–±—ã:
‚Ä¢ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ($33)
‚Ä¢ –ò–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –≤—ã–¥–∞—á–∏ –¥–æ—Å—Ç—É–ø–∞

–ï—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π —Ç—ã –Ω–µ –æ–ø–ª–∞—Ç–∏—à—å –∏–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—à—å –¥–æ—Å—Ç—É–ø –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —Ç–µ–±—è –∏—Å–∫–ª—é—á–∞—Ç –∏–∑ –≥—Ä—É–ø–ø—ã.

üí≥ <b>–î–ª—è –æ–ø–ª–∞—Ç—ã:</b>
1. –ù–∞–∂–º–∏ /start –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º
2. –í—ã–±–µ—Ä–∏ "–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø - $33"
3. –û–ø–ª–∞—Ç–∏ –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º

üìû <b>–î–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:</b>
–ù–∞–ø–∏—à–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.

‚è∞ <b>–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏:</b> 3 –¥–Ω—è

–ù–µ —Ç–µ—Ä—è–π –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É! üöÄ"""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            sent = await self.telegram_service.send_message(
                user.telegram_id,
                warning_message,
                parse_mode='HTML'
            )
            
            if sent:
                logger.info(f"üì§ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id} (@{user.username})")
                return True
            else:
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id} (@{user.username}) - –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
            return False
    
    async def _schedule_user_kick(self, telegram_id: int) -> None:
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ 3 –¥–Ω—è."""
        try:
            logger.info(f"‚è≥ –ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} - –æ–∂–∏–¥–∞–Ω–∏–µ 3 –¥–Ω—è...")
            
            # –ñ–¥–µ–º 3 –¥–Ω—è
            logger.info(f"‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ 3 –¥–Ω—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}...")
            await asyncio.sleep(3 * 24 * 60 * 60)  # 3 –¥–Ω—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (3 * 24 * 60 * 60)
            
            logger.info(f"‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} - –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–ø–ª–∞—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è
            result = await self._kick_user_if_unpaid(telegram_id)
            
            if result:
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} —É—Å–ø–µ—à–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã")
            else:
                logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –ù–ï –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω - –≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
    
    async def _kick_user_if_unpaid(self, telegram_id: int) -> bool:
        """–ò—Å–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ –æ–ø–ª–∞—Ç–∏–ª."""
        try:
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –ø–µ—Ä–µ–¥ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º...")
            
            async with get_db_session() as session:
                user_service = UserService(session)
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user = await user_service.get_user_by_telegram_id(telegram_id)
                
                if not user:
                    logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    return False
                
                logger.info(f"üìä –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {user.status}, Premium: {user.is_premium}, –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {user.subscription_until}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–ø–ª–∞—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è
                has_active_subscription = (
                    user.status == "active" and 
                    user.is_premium and 
                    user.subscription_until and 
                    user.subscription_until > datetime.utcnow()
                )
                
                if has_active_subscription:
                    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É, –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                    return False
                
                logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –æ–ø–ª–∞—Ç–∏–ª, –∏—Å–∫–ª—é—á–∞–µ–º –∏–∑ –≥—Ä—É–ø–ø—ã...")
                
                # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã
                result = await self._kick_user_from_group(telegram_id)
                
                if result:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    from app.schemas.user import UserUpdate
                    await user_service.update_user(str(user.id), UserUpdate(
                        is_in_group=False,
                        status="pending"
                    ))
                    
                    logger.info(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã")
                    return True
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
                    return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
            import traceback
            logger.error(f"üìã Traceback: {traceback.format_exc()}")
            return False
    
    async def _kick_user_from_group(self, telegram_id: int) -> bool:
        """–ò—Å–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã."""
        try:
            # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã
            success = await self.telegram_service.kick_chat_member(
                chat_id=int(self.settings.GROUP_ID),
                user_id=telegram_id
            )
            
            if success:
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} —É—Å–ø–µ—à–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã")
                return True
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} —á–µ—Ä–µ–∑ Telegram API")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –∏–∑ –≥—Ä—É–ø–ø—ã: {e}")
            return False
    
    async def add_user_to_group(self, telegram_id: int) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—Ä–∞—Ç–Ω–æ –≤ –≥—Ä—É–ø–ø—É.
        
        Args:
            telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            success = await self.telegram_service.unban_chat_member(
                chat_id=int(self.settings.GROUP_ID),
                user_id=telegram_id
            )
            
            if success:
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –¥–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞—Ç–Ω–æ –≤ –≥—Ä—É–ø–ø—É")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                async with get_db_session() as session:
                    user_service = UserService(session)
                    user = await user_service.get_user_by_telegram_id(telegram_id)
                    
                    if user:
                        from app.schemas.user import UserUpdate
                        await user_service.update_user(str(user.id), UserUpdate(
                            is_in_group=True,
                            joined_group_at=datetime.utcnow()
                        ))
            
            return success
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –≤ –≥—Ä—É–ø–ø—É: {e}")
            return False
    
    async def auto_add_paid_user_to_group(self, user_id: int) -> bool:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É.
        
        Args:
            user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            async with get_db_session() as session:
                user_service = UserService(session)
                user = await user_service.get_user_by_telegram_id(user_id)
                
                if not user:
                    logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
                has_active_subscription = (
                    user.status == "active" and 
                    user.is_premium and 
                    user.subscription_until and 
                    user.subscription_until > datetime.utcnow()
                )
                
                if not has_active_subscription:
                    logger.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏")
                    return False
                
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ, –Ω–µ –Ω—É–∂–Ω–æ –µ–≥–æ –¥–æ–±–∞–≤–ª—è—Ç—å
                if user.is_in_group:
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ")
                    return True
                
                # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω)
                success = await self.add_user_to_group(user_id)
                
                if success:
                    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É")
                    return True
                else:
                    # –ï—Å–ª–∏ —Ä–∞–∑–±–∞–Ω –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ")
                    return await self._send_group_invite(user_id)
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –≥—Ä—É–ø–ø—É: {e}")
            return False
    
    async def _send_group_invite(self, user_id: int) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –≥—Ä—É–ø–ø—É.
        
        Args:
            user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if not self.telegram_service or not self.telegram_service.bot:
                logger.error("TelegramService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            
            # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
            invite_link = await self.telegram_service.create_chat_invite_link()
            if not invite_link:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            message = f"""
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–± ¬´–û–°–ù–û–í–ê –ü–£–¢–ò¬ª!

–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∑–∞–∫—Ä—ã—Ç–æ–π –≥—Ä—É–ø–ø–µ.

üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞: {invite_link}

–£–≤–∏–¥–∏–º—Å—è –≤ –≥—Ä—É–ø–ø–µ! üöÄ
"""
            
            await self.telegram_service.send_message(user_id, message)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            async with get_db_session() as session:
                user_service = UserService(session)
                user = await user_service.get_user_by_telegram_id(user_id)
                
                if user:
                    from app.schemas.user import UserUpdate
                    await user_service.update_user(str(user.id), UserUpdate(
                        is_in_group=True,
                        joined_group_at=datetime.utcnow()
                    ))
            
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False
    
    async def _sync_group_members_status(self, user_service: UserService) -> None:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º."""
        try:
            logger.info("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã (–Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫—Ç–æ –≤ –≥—Ä—É–ø–ø–µ)
            all_users = await user_service.get_all_users()
            logger.info(f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {len(all_users)}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ Telegram API
            real_members = await self._get_real_group_members()
            logger.info(f"üë• –†–µ–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ: {len(real_members)}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
            updated_count = 0
            for user in all_users:
                is_really_in_group = user.telegram_id in real_members
                
                # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º
                if user.is_in_group != is_really_in_group:
                    user.is_in_group = is_really_in_group
                    if is_really_in_group:
                        user.joined_group_at = datetime.utcnow()
                        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} (@{user.username}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É")
                    else:
                        user.joined_group_at = None
                        logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} (@{user.username}) –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É")
                    updated_count += 1
            
            if updated_count > 0:
                await user_service.session.commit()
                logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            else:
                logger.info("‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–∫—Ç—É–∞–ª–µ–Ω")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    
    async def _get_real_group_members(self) -> List[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ Telegram API."""
        try:
            if not self.telegram_service or not self.telegram_service.bot:
                logger.warning("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é")
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
            members = []
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ
                chat_member_count = await self.telegram_service.bot.get_chat_member_count(
                    chat_id=int(self.settings.GROUP_ID)
                )
                logger.info(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ: {chat_member_count}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–æ–Ω–∏ —Ç–æ—á–Ω–æ –µ—Å—Ç—å –≤ –≥—Ä—É–ø–ø–µ)
                administrators = await self.telegram_service.bot.get_chat_administrators(
                    chat_id=int(self.settings.GROUP_ID)
                )
                
                for admin in administrators:
                    if admin.user.id not in members:
                        members.append(admin.user.id)
                        
                logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–æ {len(members)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ API")
                
                # –í–ê–ñ–ù–û: Telegram API –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
                # –ú—ã –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –±–æ—Ç–æ–≤
                # –ü–æ—ç—Ç–æ–º—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∫–∞–∫ "—Ä–µ–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
                # –û—Å—Ç–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –±–æ—Ç–æ–º
                
                return members
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ API: {e}")
                return []
                
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã: {e}")
            return []
