"""
–°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è ClubBot —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó.

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã.
"""

from typing import Dict, List, Any, Optional
from datetime import datetime, timedelta
from sqlalchemy import select, func, and_
from sqlalchemy.ext.asyncio import AsyncSession
from loguru import logger

from app.models.user import User
from app.models.report import Report
from app.models.goal import Goal
from app.models.activity import UserActivity


class AnalyticsService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
    
    def __init__(self, session: AsyncSession):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
        self.session = session
    
    async def get_weekly_activity_stats(self, start_date: datetime = None) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –Ω–µ–¥–µ–ª—é —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó.
        
        Args:
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ–¥–µ–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥)
            
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        """
        try:
            if not start_date:
                start_date = datetime.utcnow() - timedelta(days=7)
            
            end_date = start_date + timedelta(days=7)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            active_users_query = select(User).where(
                and_(
                    User.is_premium == True,
                    User.subscription_end > datetime.utcnow()
                )
            )
            active_users_result = await self.session.execute(active_users_query)
            active_users = active_users_result.scalars().all()
            
            user_stats = []
            
            for user in active_users:
                # –°—á–∏—Ç–∞–µ–º –æ—Ç—á–µ—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é
                reports_query = select(func.count(Report.id)).where(
                    and_(
                        Report.user_id == user.id,
                        Report.created_at >= start_date,
                        Report.created_at <= end_date
                    )
                )
                reports_result = await self.session.execute(reports_query)
                reports_count = reports_result.scalar() or 0
                
                # –°—á–∏—Ç–∞–µ–º —Ü–µ–ª–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
                goals_query = select(func.count(Goal.id)).where(
                    and_(
                        Goal.user_id == user.id,
                        Goal.created_at >= start_date,
                        Goal.created_at <= end_date
                    )
                )
                goals_result = await self.session.execute(goals_query)
                goals_count = goals_result.scalar() or 0
                
                # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                activity_score = reports_count * 2 + goals_count * 3  # –í–µ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                
                user_stats.append({
                    'user_id': user.id,
                    'telegram_id': user.telegram_id,
                    'username': user.username or f"user_{user.telegram_id}",
                    'reports_count': reports_count,
                    'goals_count': goals_count,
                    'activity_score': activity_score
                })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            user_stats.sort(key=lambda x: x['activity_score'], reverse=True)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ 3)
            top_active = []
            connecting = []
            
            for i, user_stat in enumerate(user_stats):
                if i < 3 and user_stat['activity_score'] > 0:
                    top_active.append(user_stat['username'])
                elif user_stat['activity_score'] == 0 or (i >= 3 and user_stat['activity_score'] < 5):
                    connecting.append(user_stat['username'])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = {
                'period_start': start_date,
                'period_end': end_date,
                'total_users': len(active_users),
                'active_users': len([u for u in user_stats if u['activity_score'] > 0]),
                'inactive_users': len([u for u in user_stats if u['activity_score'] == 0]),
                'top_active': top_active[:3],  # –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                'connecting': connecting[:3],  # –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                'user_stats': user_stats,
                'total_reports': sum(u['reports_count'] for u in user_stats),
                'total_goals': sum(u['goals_count'] for u in user_stats),
                'average_activity': sum(u['activity_score'] for u in user_stats) / len(user_stats) if user_stats else 0
            }
            
            logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {stats['active_users']}/{stats['total_users']} –∞–∫—Ç–∏–≤–Ω—ã—Ö")
            return stats
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            return {
                'period_start': start_date or datetime.utcnow() - timedelta(days=7),
                'period_end': (start_date or datetime.utcnow() - timedelta(days=7)) + timedelta(days=7),
                'total_users': 0,
                'active_users': 0,
                'inactive_users': 0,
                'top_active': [],
                'connecting': [],
                'user_stats': [],
                'total_reports': 0,
                'total_goals': 0,
                'average_activity': 0
            }
    
    async def get_admin_activity_report(self, start_date: datetime = None) -> str:
        """
        –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó.
        
        Args:
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ–¥–µ–ª–∏
            
        Returns:
            str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞
        """
        try:
            stats = await self.get_weekly_activity_stats(start_date)
            
            report = f"""
üìä <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>

<b>–ü–µ—Ä–∏–æ–¥:</b> {stats['period_start'].strftime('%d.%m.%Y')} - {stats['period_end'].strftime('%d.%m.%Y')}

<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {stats['total_users']}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_users']}
‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {stats['inactive_users']}
üìù –í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤: {stats['total_reports']}
üéØ –í—Å–µ–≥–æ —Ü–µ–ª–µ–π: {stats['total_goals']}
üìà –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats['average_activity']:.1f}

<b>–¢–æ–ø –≤–∫–ª—é—á—ë–Ω–Ω—ã—Ö:</b>
"""
            
            if stats['top_active']:
                for i, username in enumerate(stats['top_active'], 1):
                    report += f"{i}. @{username}\n"
            else:
                report += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            
            report += "\n<b>–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è:</b>\n"
            if stats['connecting']:
                for username in stats['connecting']:
                    report += f"‚Ä¢ @{username}\n"
            else:
                report += "–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã!\n"
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            report += "\n<b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            for user_stat in stats['user_stats'][:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10
                report += f"@{user_stat['username']}: {user_stat['reports_count']} –æ—Ç—á–µ—Ç–æ–≤, {user_stat['goals_count']} —Ü–µ–ª–µ–π (–±–∞–ª–ª—ã: {user_stat['activity_score']})\n"
            
            return report
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞"
    
    async def get_public_activity_message(self, start_date: datetime = None) -> str:
        """
        –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó.
        
        Args:
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ–¥–µ–ª–∏
            
        Returns:
            str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
        """
        try:
            stats = await self.get_weekly_activity_stats(start_date)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö
            top_active_str = ", ".join([f"@{username}" for username in stats['top_active']]) if stats['top_active'] else "–ü–æ–∫–∞ –Ω–µ—Ç –ª–∏–¥–µ—Ä–æ–≤"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–∞—é—â–∏—Ö—Å—è
            connecting_str = ", ".join([f"@{username}" for username in stats['connecting']]) if stats['connecting'] else "–í—Å–µ –Ω–∞ –≤—ã—Å–æ—Ç–µ!"
            
            message = f"""
üìä <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>

<b>–¢–æ–ø –≤–∫–ª—é—á—ë–Ω–Ω—ã—Ö:</b> {top_active_str}
<b>–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è:</b> {connecting_str}

–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–µ—Ä–∂–∞—Ç—å —Ä–∏—Ç–º! üí™
"""
            
            return message
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return """
üìä <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>

<b>–¢–æ–ø –≤–∫–ª—é—á—ë–Ω–Ω—ã—Ö:</b> –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è...
<b>–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è:</b> –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è...

–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–µ—Ä–∂–∞—Ç—å —Ä–∏—Ç–º! üí™
"""
    
    async def update_user_activity(self, user_id: int, activity_type: str, details: str = "") -> bool:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            activity_type: –¢–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (report, goal, ritual, etc.)
            details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_query = select(User).where(User.telegram_id == user_id)
            user_result = await self.session.execute(user_query)
            user = user_result.scalar_one_or_none()
            
            if not user:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            activity = UserActivity(
                user_id=user.id,
                activity_type=activity_type,
                details=details,
                created_at=datetime.utcnow()
            )
            
            self.session.add(activity)
            await self.session.commit()
            
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {activity_type}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await self.session.rollback()
            return False
    
    async def get_user_weekly_summary(self, user_id: int, start_date: datetime = None) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ–¥–µ–ª–∏
            
        Returns:
            Dict: –°–≤–æ–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            if not start_date:
                start_date = datetime.utcnow() - timedelta(days=7)
            
            end_date = start_date + timedelta(days=7)
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_query = select(User).where(User.telegram_id == user_id)
            user_result = await self.session.execute(user_query)
            user = user_result.scalar_one_or_none()
            
            if not user:
                return {'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}
            
            # –°—á–∏—Ç–∞–µ–º –æ—Ç—á–µ—Ç—ã
            reports_query = select(func.count(Report.id)).where(
                and_(
                    Report.user_id == user.id,
                    Report.created_at >= start_date,
                    Report.created_at <= end_date
                )
            )
            reports_result = await self.session.execute(reports_query)
            reports_count = reports_result.scalar() or 0
            
            # –°—á–∏—Ç–∞–µ–º —Ü–µ–ª–∏
            goals_query = select(func.count(Goal.id)).where(
                and_(
                    Goal.user_id == user.id,
                    Goal.created_at >= start_date,
                    Goal.created_at <= end_date
                )
            )
            goals_result = await self.session.execute(goals_query)
            goals_count = goals_result.scalar() or 0
            
            return {
                'user_id': user_id,
                'username': user.username,
                'reports_count': reports_count,
                'goals_count': goals_count,
                'activity_score': reports_count * 2 + goals_count * 3,
                'period_start': start_date,
                'period_end': end_date
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return {'error': str(e)}
