"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è ClubBot.

–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.
"""

from datetime import datetime
from typing import Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from loguru import logger

from app.core.database import get_db_session
from app.services import UserService, PaymentService, RitualService
import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent.parent.parent))
from config.settings import settings


async def admin_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
    
    Args:
        update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    try:
        query = update.callback_query
        if not query:
            return
            
        await query.answer()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user_id = update.effective_user.id
        if user_id not in settings.admin_ids_list:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        callback_data = query.data
        
        if callback_data == "admin_panel":
            await show_admin_panel(update, context)
        elif callback_data == "admin_stats":
            await show_stats(update, context)
        elif callback_data == "admin_users":
            await show_users(update, context)
        elif callback_data == "admin_payments":
            await show_payments(update, context)
        elif callback_data == "admin_rituals":
            await show_rituals(update, context)
        else:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_handler: {e}")
        if update.callback_query:
            await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def show_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω—É—é –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    try:
        admin_text = """
üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ClubBot!</b>

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
‚Ä¢ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
‚Ä¢ üí≥ –ü–ª–∞—Ç–µ–∂–∏ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–∞—Ö
‚Ä¢ üßò –†–∏—Ç—É–∞–ª—ã - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Ç—É–∞–ª–∞–º–∏

<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>
"""
        
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
            [InlineKeyboardButton("üí≥ –ü–ª–∞—Ç–µ–∂–∏", callback_data="admin_payments")],
            [InlineKeyboardButton("üßò –†–∏—Ç—É–∞–ª—ã", callback_data="admin_rituals")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            admin_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_admin_panel: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞."""
    try:
        async with get_db_session() as session:
            user_service = UserService(session)
            payment_service = PaymentService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user_stats = await user_service.get_user_statistics()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π
            total_payments = await payment_service.get_payments_count()
            total_revenue = await payment_service.get_total_revenue()
            
            stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ClubBot</b>

<b>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: {user_stats.get('total', 0)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {user_stats.get('active', 0)}
‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {user_stats.get('inactive', 0)}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {user_stats.get('banned', 0)}

<b>üìà –†–æ—Å—Ç:</b>
‚Ä¢ –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {user_stats.get('new_today', 0)}
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {user_stats.get('new_week', 0)}
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {user_stats.get('new_month', 0)}

<b>üí≥ –ü–ª–∞—Ç–µ–∂–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {total_payments}
‚Ä¢ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_revenue:.2f} ‚ÇΩ

<b>üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {user_stats.get('activity_rate', 0)}%

<b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}
"""
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats")],
                [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                stats_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_stats: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def show_users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö."""
    try:
        async with get_db_session() as session:
            user_service = UserService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            recent_users = await user_service.get_recent_users(limit=5)
            
            users_text = """
üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>

<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
"""
            
            for user in recent_users:
                status_emoji = {
                    'active': '‚úÖ',
                    'inactive': '‚è∏Ô∏è',
                    'banned': 'üö´',
                    'pending': '‚è≥'
                }.get(user.status, '‚ùì')
                
                users_text += f"\n{status_emoji} {user.display_name}"
                users_text += f"\n   ID: {user.telegram_id}"
                users_text += f"\n   –°—Ç–∞—Ç—É—Å: {user.status}"
                users_text += f"\n   –°–æ–∑–¥–∞–Ω: {user.created_at.strftime('%d.%m.%Y')}\n"
            
            if not recent_users:
                users_text += "\n‚Ä¢ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_users")],
                [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                users_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_users: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def show_payments(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–∞—Ö."""
    try:
        async with get_db_session() as session:
            payment_service = PaymentService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏
            recent_payments = await payment_service.get_recent_payments(limit=5)
            
            payments_text = """
üí≥ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏</b>

<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏:</b>
"""
            
            for payment in recent_payments:
                status_emoji = {
                    'paid': '‚úÖ',
                    'pending': '‚è≥',
                    'failed': '‚ùå',
                    'cancelled': 'üö´',
                    'expired': '‚è∞'
                }.get(payment.status, '‚ùì')
                
                payments_text += f"\n{status_emoji} {payment.amount} {payment.currency}"
                payments_text += f"\n   –°—Ç–∞—Ç—É—Å: {payment.status}"
                payments_text += f"\n   –°–æ–∑–¥–∞–Ω: {payment.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            
            if not recent_payments:
                payments_text += "\n‚Ä¢ –ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π"
            
            payments_text += f"""

<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
–§—É–Ω–∫—Ü–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞.
–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.
"""
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_payments")],
                [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                payments_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_payments: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def show_rituals(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∏—Ç—É–∞–ª–∞—Ö."""
    try:
        async with get_db_session() as session:
            ritual_service = RitualService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∏—Ç—É–∞–ª—ã
            active_rituals = await ritual_service.get_active_rituals()
            
            rituals_text = """
üßò <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Ç—É–∞–ª–∞–º–∏</b>

<b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∏—Ç—É–∞–ª—ã:</b>
"""
            
            for ritual in active_rituals:
                type_emoji = {
                    'morning': 'üåÖ',
                    'evening': 'üåô',
                    'weekly_challenge': 'üéØ',
                    'weekly_goals': 'üìã',
                    'friday_cycle': 'üèÅ'
                }.get(ritual.type, 'üßò')
                
                rituals_text += f"\n{type_emoji} {ritual.name}"
                rituals_text += f"\n   –¢–∏–ø: {ritual.type}"
                rituals_text += f"\n   –í—Ä–µ–º—è: {ritual.send_hour:02d}:{ritual.send_minute:02d}"
                rituals_text += f"\n   –ê–∫—Ç–∏–≤–µ–Ω: {'‚úÖ' if ritual.is_active else '‚ùå'}\n"
            
            if not active_rituals:
                rituals_text += "\n‚Ä¢ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∏—Ç—É–∞–ª–æ–≤"
            
            rituals_text += f"""

<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∏—Ç—É–∞–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ RitualService.
–ü–æ–¥—Ä–æ–±–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.
"""
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_rituals")],
                [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                rituals_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_rituals: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

