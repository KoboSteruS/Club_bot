"""
–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è ClubBot —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó.

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ callback'—ã: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏, –æ–ø–ª–∞—Ç–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—É–±–µ.
"""

from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from loguru import logger

from app.core.database import get_db_session


async def safe_answer_callback(query, text: str = None) -> bool:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callback query —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
    
    Args:
        query: Callback query –æ–±—ä–µ–∫—Ç
        text: –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        bool: True –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
    """
    try:
        await query.answer(text=text)
        return True
    except Exception as e:
        if "Query is too old" in str(e) or "query id is invalid" in str(e):
            logger.warning(f"–£—Å—Ç–∞—Ä–µ–≤—à–∏–π callback query: {e}")
            return False
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback query: {e}")
            return False
from app.services.user_service import UserService
from app.services.telegram_service import TelegramService
import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent.parent.parent))
from config.settings import settings


async def main_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó.
    
    Args:
        update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    try:
        query = update.callback_query
        if not query:
            return
            
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callback query
        if not await safe_answer_callback(query):
            logger.warning("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ callback query")
            return
        
        user = update.effective_user
        if not user:
            return
        
        callback_data = query.data
        
        if callback_data == "check_subscription":
            await handle_subscription_check(update, context)
        elif callback_data == "payment_options":
            await handle_payment_options(update, context)
        elif callback_data == "about_club":
            await handle_about_club(update, context)
        elif callback_data == "back_to_start":
            await handle_back_to_start(update, context)
        elif callback_data == "subscription_confirmed":
            await handle_subscription_confirmed(update, context)
        elif callback_data.startswith("pay_"):
            await handle_payment_create(update, context)
        elif callback_data.startswith("check_payment_"):
            await handle_payment_check(update, context)
        else:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ main_handler: {e}")
        # –ù–µ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ callback query –≤ –±–ª–æ–∫–µ except,
        # —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º


async def handle_subscription_check(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó."""
    try:
        user = update.effective_user
        telegram_service = TelegramService(context.bot)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
        is_subscribed = await telegram_service.check_user_subscription(user.id)
        
        if is_subscribed:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω
            async with get_db_session() as session:
                user_service = UserService(session)
                db_user = await user_service.get_user_by_telegram_id(user.id)
                
                if db_user:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
                    from app.schemas.user import UserUpdate
                    await user_service.update_user(str(db_user.id), UserUpdate(
                        is_subscribed_to_channel=True
                    ))
            
            message = """‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!

–û—Ç–ª–∏—á–Ω–æ üëä –¢—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–∞–Ω–∞–ª–µ. –≠—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ.

–ß—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –Ø–î–†–û –∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ.

–ß—Ç–æ –¥–∞—ë—Ç –æ–ø–ª–∞—á–µ–Ω–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ:
üéØ –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ—Å—è—á–Ω—ã—Ö —Ü–µ–ª–µ–π –∏ –∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞
üìù –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á—ë—Ç—ã ‚Äî –≤–∏–¥–Ω–æ, –≥–¥–µ —Ç—ã –¥–µ—Ä–∂–∏—à—å —Ñ–æ—Ä–º—É, –∞ –≥–¥–µ —Å–¥–∞—ë—à—å—Å—è
üí¨ –î–æ—Å—Ç—É–ø –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫—Ä—É–≥ –±–µ–∑ —Ñ–ª—É–¥–∞ –∏ –∂–∞–ª–æ—Å—Ç–∏ ‚Äî —Ç–æ–ª—å–∫–æ —Ä–æ—Å—Ç –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞
üîé –°–∏—Å—Ç–µ–º–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è: —Ç–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ –≤–∏–¥—É

–ó–¥–µ—Å—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —è—Å–Ω–æ, –∫—Ç–æ –≥–æ—Ç–æ–≤ –∏–¥—Ç–∏ –¥–∞–ª—å—à–µ, –∞ –∫—Ç–æ –æ—Å—Ç–∞—ë—Ç—Å—è –≤ —Å—Ç–∞—Ä–æ–º.

üöÄ –ì–æ—Ç–æ–≤ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø –∏ –≤–æ–π—Ç–∏ –≤ –Ø–î–†–û?"""
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="payment_options")],
                [InlineKeyboardButton("üìò –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ", callback_data="about_club")]
            ])
            
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
            message = """
‚ùå <b>–£—á–∞—Å—Ç–∏–µ –≤ –≥—Ä—É–ø–ø–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>

–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–ª—É–±—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä—É–ø–ø–µ:
–Ø–î–†–û –ö–õ–£–ë–ê / –û–°–ù–û–í–ê PUT–ò

<b>–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</b>
1Ô∏è‚É£ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è"
2Ô∏è‚É£ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Å—å –∫ –≥—Ä—É–ø–ø–µ
3Ô∏è‚É£ –í–µ—Ä–Ω–∏—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞"

<b>–ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç –≤ –≥—Ä—É–ø–ø–µ:</b>
‚Ä¢ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞. –≠–Ω–µ—Ä–≥–∏—è. –î–≤–∏–∂–µ–Ω–∏–µ
‚Ä¢ –ë–µ–∑ –≤–æ–¥—ã. –ë–µ–∑ –≥—É—Ä—É. –ë–µ–∑ –º–∞—Å–æ–∫
‚Ä¢ –¢–æ–ª—å–∫–æ —Ç—ã, —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
‚Ä¢ –û–±—â–µ–Ω–∏–µ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∫–ª—É–±–∞
"""
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", url="https://t.me/+hWoFGCMcaI83YTY0")],
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="check_subscription")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ])
        
        await update.callback_query.edit_message_text(
            message,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_subscription_check: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏")


async def handle_payment_options(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã."""
    try:
        message = """
üí≥ <b>–î–æ—Å—Ç—É–ø –∫ –∫–ª—É–±—É ¬´–û–°–ù–û–í–ê –ü–£–¢–ò¬ª</b>

üíé <b>–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø - $33</b>
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–∏—Ç—É–∞–ª—ã –Ø–î–†–ê
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Ü–µ–ª—è–º–∏
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É —á–∞—Ç—É
‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã

<b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞
‚Ä¢ USDT, TON, BTC, ETH –∏ –¥—Ä—É–≥–∏–µ
‚Ä¢ –ë—ã—Å—Ç—Ä–æ, –∞–Ω–æ–Ω–∏–º–Ω–æ, –±–µ–∑ –±–∞–Ω–∫–æ–≤
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ

üéØ <b>–û–¥–∏–Ω —Ç–∞—Ä–∏—Ñ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å!</b>
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üíé –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø - $33", callback_data="pay_monthly")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ])
        
        await update.callback_query.edit_message_text(
            message,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_payment_options: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def handle_about_club(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—É–±–µ."""
    try:
        user = update.effective_user
        telegram_service = TelegramService(context.bot)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        async with get_db_session() as session:
            from app.services.user_service import UserService
            user_service = UserService(session)
            
            db_user = await user_service.get_user_by_telegram_id(user.id)
            
            if db_user and db_user.is_premium and db_user.subscription_until and db_user.subscription_until > datetime.now():
                # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
                await telegram_service.send_about_club_message_for_subscribers(user.id)
            else:
                # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
                await telegram_service.send_about_club_message(user.id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_about_club: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def handle_back_to_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é."""
    try:
        user = update.effective_user
        telegram_service = TelegramService(context.bot)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with get_db_session() as session:
            from app.services.user_service import UserService
            user_service = UserService(session)
            
            db_user = await user_service.get_user_by_telegram_id(user.id)
            
            if db_user and db_user.is_premium and db_user.subscription_until and db_user.subscription_until > datetime.now():
                # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                username = user.first_name or user.username or str(user.id)
                await telegram_service.send_subscription_active_message(user.id, username, db_user.subscription_until)
            else:
                # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                username = user.first_name or user.username or str(user.id)
                await telegram_service.send_welcome_message(user.id, username)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_back_to_start: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def handle_subscription_confirmed(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏."""
    try:
        # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
        await handle_subscription_check(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_subscription_confirmed: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def handle_payment_create(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ CryptoBot."""
    try:
        query = update.callback_query
        user = update.effective_user
        callback_data = query.data
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø —Ç–∞—Ä–∏—Ñ–∞
        tariff_type = callback_data.replace("pay_", "")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        from app.services.crypto_service import CryptoService
        
        crypto_service = CryptoService()
        tariff_info = crypto_service.get_tariff_info(tariff_type)
        
        # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç
        invoice = await crypto_service.create_invoice(
            amount=tariff_info["price"],
            asset=tariff_info["asset"],
            description=tariff_info["description"],
            user_id=user.id
        )
        
        if invoice:
            pay_url = crypto_service.get_payment_url(invoice)
            
            message = f"""
üí≥ <b>–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω!</b>

<b>–¢–∞—Ä–∏—Ñ:</b> {tariff_info["name"]}
<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {tariff_info["price"]} {tariff_info["asset"]}
<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {tariff_info["duration_days"]} –¥–Ω–µ–π

<b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞
‚Ä¢ –ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è: USDT, TON, BTC, ETH –∏ –¥—Ä—É–≥–∏–µ
‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –∏ –∞–Ω–æ–Ω–∏–º–Ω–∞—è –æ–ø–ª–∞—Ç–∞  
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
‚Ä¢ –ë–µ–∑ –±–∞–Ω–∫–æ–≤ –∏ –∫–∞—Ä—Ç

<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>
1Ô∏è‚É£ –ù–∞–∂–º–∏ "–û–ø–ª–∞—Ç–∏—Ç—å" (–æ—Ç–∫—Ä–æ–µ—Ç—Å—è @CryptoBot)
2Ô∏è‚É£ –í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
3Ô∏è‚É£ –ü–µ—Ä–µ–≤–µ–¥–∏ —Ç–æ—á–Ω—É—é —Å—É–º–º—É
4Ô∏è‚É£ –ü–æ–ª—É—á–∏ –¥–æ—Å—Ç—É–ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

‚ö†Ô∏è –°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 24 —á–∞—Å–∞
"""
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=pay_url)],
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment_{invoice['invoice_id']}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="payment_options")]
            ])
            
            await query.edit_message_text(
                message,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á–µ—Ç–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            async with get_db_session() as session:
                from app.services.payment_service import PaymentService
                from app.services.user_service import UserService
                
                payment_service = PaymentService(session)
                user_service = UserService(session)
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ Telegram ID
                db_user = await user_service.get_user_by_telegram_id(user.id)
                if not db_user:
                    logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    await query.edit_message_text(
                        "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
                        ])
                    )
                    return
                
                from app.schemas.payment import PaymentCreate
                payment_data = PaymentCreate(
                    user_id=str(db_user.id),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
                    amount=float(tariff_info["price"]),
                    currency=tariff_info["asset"],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º asset –≤–º–µ—Å—Ç–æ currency
                    payment_method="cryptobot",
                    tariff_type=tariff_type,
                    external_payment_id=str(invoice['invoice_id'])
                )
                
                await payment_service.create_payment(payment_data)
                logger.info(f"–°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} (UUID: {db_user.id}): {invoice['invoice_id']}")
                
        else:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="payment_options")]
                ])
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_payment_create: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")


async def handle_payment_check(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞."""
    try:
        query = update.callback_query
        user = update.effective_user
        callback_data = query.data
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å—á–µ—Ç–∞
        invoice_id = callback_data.replace("check_payment_", "")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        from app.services.crypto_service import CryptoService
        
        crypto_service = CryptoService()
        invoice = await crypto_service.get_invoice(invoice_id)
        
        if invoice:
            status = invoice.get("status")
            
            if status == "paid":
                # –ü–ª–∞—Ç–µ–∂ –≤—ã–ø–æ–ª–Ω–µ–Ω - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø
                async with get_db_session() as session:
                    from app.services.payment_service import PaymentService
                    from app.services.user_service import UserService
                    
                    payment_service = PaymentService(session)
                    user_service = UserService(session)
                    
                    # –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂
                    payment = await payment_service.get_payment_by_external_id(invoice_id)
                    if payment:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                        from app.schemas.payment import PaymentUpdate
                        await payment_service.update_payment(str(payment.id), PaymentUpdate(
                            status="completed",
                            paid_at=invoice.get("paid_at")
                        ))
                        
                        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        db_user = await user_service.get_user_by_telegram_id(user.id)
                        if db_user:
                            from datetime import datetime, timedelta
                            from app.schemas.user import UserUpdate
                            
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
                            tariff_type = payment.tariff_type or "1month"
                            duration_map = {"1month": 30, "3months": 90, "subscription": 365}
                            duration_days = duration_map.get(tariff_type, 30)
                            
                            subscription_end = datetime.utcnow() + timedelta(days=duration_days)
                            
                            await user_service.update_user(str(db_user.id), UserUpdate(
                                is_premium=True,
                                subscription_end=subscription_end
                            ))
                            
                            logger.info(f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –¥–æ {subscription_end}")
                
                message = """
‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>

–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–ª—É–±—É ¬´–û–°–ù–û–í–ê –ü–£–¢–ò¬ª.

<b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>
üìù –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã (21:00)
üéØ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏ (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
üí¨ –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–π –≥—Ä—É–ø–ø–µ
üìä –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –°–ª–µ–¥–∏ –∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏!

<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ø–î–†–û!</b>
–ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é —É–∂–µ —Å–µ–≥–æ–¥–Ω—è üí™
"""
                
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üí¨ –ì—Ä—É–ø–ø–∞ –∫–ª—É–±–∞", url="https://t.me/+hWoFGCMcaI83YTY0")],
                    [InlineKeyboardButton("‚ÑπÔ∏è –û –∫–ª—É–±–µ", callback_data="about_club")]
                ])
                
            elif status == "active":
                # –°—á–µ—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ –æ–ø–ª–∞—á–µ–Ω
                message = """
‚è≥ <b>–û–∂–∏–¥–∞–µ–º –æ–ø–ª–∞—Ç—É</b>

–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ –æ–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞.

<b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>
1Ô∏è‚É£ –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–µ—Ä–µ–≤–µ–ª —Ç–æ—á–Ω—É—é —Å—É–º–º—É
2Ô∏è‚É£ –ü–æ–¥–æ–∂–¥–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç (–¥–æ 10 –º–∏–Ω—É—Ç)
3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å –µ—â–µ —Ä–∞–∑

‚ö†Ô∏è –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 10 –º–∏–Ω—É—Ç, –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
"""
                
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data=f"check_payment_{invoice_id}")],
                    [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=invoice.get("pay_url", ""))],
                    [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/support")]
                ])
                
            else:
                # –î—Ä—É–≥–∏–µ —Å—Ç–∞—Ç—É—Å—ã
                message = f"""
‚ùì <b>–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {status}</b>

–ü–ª–∞—Ç–µ–∂ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.

–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
"""
                
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data=f"check_payment_{invoice_id}")],
                    [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/support")]
                ])
                
        else:
            message = """
‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞</b>

–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
"""
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data=f"check_payment_{invoice_id}")],
                [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/support")]
            ])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        current_text = query.message.text or ""
        current_markup = str(query.message.reply_markup) if query.message.reply_markup else ""
        new_markup_str = str(keyboard)
        
        if current_text != message or current_markup != new_markup_str:
            await query.edit_message_text(
                message,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        else:
            # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            await query.answer("–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_payment_check: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞")


