"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∏—Ç—É–∞–ª–æ–≤ –¥–ª—è ClubBot.
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from loguru import logger
from datetime import datetime

from ...services.user_service import UserService
from ...services.ritual_service import RitualService
from ...services.activity_service import ActivityService, ActivityType
from ...models.ritual import RitualType
from ..keyboards.rituals import (
    get_ritual_keyboard, get_ritual_response_keyboard, 
    get_rituals_list_keyboard, get_ritual_stats_keyboard
)


async def ritual_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∏—Ç—É–∞–ª–æ–≤."""
    try:
        query = update.callback_query
        await query.answer()
        
        if query.data == "rituals_list":
            await show_rituals_list(update, context)
        elif query.data == "ritual_morning":
            await show_morning_rituals(update, context)
        elif query.data == "ritual_evening":
            await show_evening_rituals(update, context)
        elif query.data == "ritual_stats":
            await show_ritual_stats(update, context)
        elif query.data.startswith("ritual_start_"):
            await start_ritual(update, context)
        elif query.data.startswith("ritual_complete_"):
            await complete_ritual(update, context)
        elif query.data.startswith("ritual_skip_"):
            await skip_ritual(update, context)
        elif query.data.startswith("ritual_cancel_"):
            await cancel_ritual(update, context)
        elif query.data.startswith("ritual_stats_"):
            await show_ritual_stats_detail(update, context)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ritual_handler: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def show_rituals_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∏—Ç—É–∞–ª–æ–≤."""
    try:
        user = update.effective_user
        if not user:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        user_service = UserService(context.bot_data.get('session'))
        ritual_service = RitualService(context.bot_data.get('session'))
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        db_user = await user_service.get_user_by_telegram_id(user.id)
        if not db_user:
            await update.callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∏—Ç—É–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stats = await ritual_service.get_user_ritual_stats(str(db_user.id), 30)
        
        rituals_text = f"""
üßò <b>–†–∏—Ç—É–∞–ª—ã –Ø–î–†–ê</b>

<b>–¢–≤–æ—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 30 –¥–Ω–µ–π:</b>
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–∏—Ç—É–∞–ª–æ–≤: {stats.get('completed_rituals', 0)}
‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ä–∏—Ç—É–∞–ª–æ–≤: {stats.get('skipped_rituals', 0)}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {stats.get('completion_rate', 0):.1f}%

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∏—Ç—É–∞–ª—ã:</b>
‚Ä¢ üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–∏—Ç—É–∞–ª—ã - –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –¥–µ–Ω—å
‚Ä¢ üåô –í–µ—á–µ—Ä–Ω–∏–µ —Ä–∏—Ç—É–∞–ª—ã - –¥–ª—è –ø–æ–¥–≤–µ–¥–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤

<b>–ü–æ—á–µ–º—É —Ä–∏—Ç—É–∞–ª—ã –≤–∞–∂–Ω—ã:</b>
‚Ä¢ –ü–æ–º–æ–≥–∞—é—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É
‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å
‚Ä¢ –î–∞—é—Ç –≤—Ä–µ–º—è –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç —Ä–∏—Ç–º —Ä–∞–∑–≤–∏—Ç–∏—è

–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ä–∏—Ç—É–∞–ª–æ–≤:
"""
        
        keyboard = get_rituals_list_keyboard()
        
        await update.callback_query.edit_message_text(
            rituals_text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_rituals_list: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def show_morning_rituals(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —É—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–∏—Ç—É–∞–ª—ã."""
    try:
        user = update.effective_user
        if not user:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        user_service = UserService(context.bot_data.get('session'))
        ritual_service = RitualService(context.bot_data.get('session'))
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        db_user = await user_service.get_user_by_telegram_id(user.id)
        if not db_user:
            await update.callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–∏—Ç—É–∞–ª—ã
        rituals = await ritual_service.get_rituals_by_type(RitualType.MORNING)
        
        if not rituals:
            morning_text = """
üåÖ <b>–£—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–∏—Ç—É–∞–ª—ã</b>

<b>–£—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–∏—Ç—É–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>

–û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ä–∏—Ç—É–∞–ª–æ–≤.
"""
        else:
            ritual = rituals[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ä–∏—Ç—É–∞–ª
            
            morning_text = f"""
üåÖ <b>–£—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª</b>

<b>{ritual.title}</b>

{ritual.content}

<b>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {ritual.estimated_duration} –º–∏–Ω—É—Ç
<b>–¢–∏–ø:</b> {ritual.ritual_type_display}

<b>–ü–æ—á–µ–º—É —É—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–∏—Ç—É–∞–ª—ã –≤–∞–∂–Ω—ã:</b>
‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å
‚Ä¢ –ü–æ–º–æ–≥–∞—é—Ç —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ü–µ–ª—è—Ö
‚Ä¢ –î–∞—é—Ç —ç–Ω–µ—Ä–≥–∏—é –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é
‚Ä¢ –°–æ–∑–¥–∞—é—Ç –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π

<b>–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª?</b>
"""
        
        keyboard = get_ritual_keyboard(str(ritual.id)) if rituals else [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="rituals_list")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            morning_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_morning_rituals: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def show_evening_rituals(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—á–µ—Ä–Ω–∏–µ —Ä–∏—Ç—É–∞–ª—ã."""
    try:
        user = update.effective_user
        if not user:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        user_service = UserService(context.bot_data.get('session'))
        ritual_service = RitualService(context.bot_data.get('session'))
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        db_user = await user_service.get_user_by_telegram_id(user.id)
        if not db_user:
            await update.callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—á–µ—Ä–Ω–∏–µ —Ä–∏—Ç—É–∞–ª—ã
        rituals = await ritual_service.get_rituals_by_type(RitualType.EVENING)
        
        if not rituals:
            evening_text = """
üåô <b>–í–µ—á–µ—Ä–Ω–∏–µ —Ä–∏—Ç—É–∞–ª—ã</b>

<b>–í–µ—á–µ—Ä–Ω–∏–µ —Ä–∏—Ç—É–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>

–û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ—á–µ—Ä–Ω–∏—Ö —Ä–∏—Ç—É–∞–ª–æ–≤.
"""
        else:
            ritual = rituals[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ä–∏—Ç—É–∞–ª
            
            evening_text = f"""
üåô <b>–í–µ—á–µ—Ä–Ω–∏–π —Ä–∏—Ç—É–∞–ª</b>

<b>{ritual.title}</b>

{ritual.content}

<b>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {ritual.estimated_duration} –º–∏–Ω—É—Ç
<b>–¢–∏–ø:</b> {ritual.ritual_type_display}

<b>–ü–æ—á–µ–º—É –≤–µ—á–µ—Ä–Ω–∏–µ —Ä–∏—Ç—É–∞–ª—ã –≤–∞–∂–Ω—ã:</b>
‚Ä¢ –ü–æ–º–æ–≥–∞—é—Ç –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏ –¥–Ω—è
‚Ä¢ –î–∞—é—Ç –≤—Ä–µ–º—è –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç –Ω–∞ —Å–ø–æ–∫–æ–π–Ω—ã–π —Å–æ–Ω
‚Ä¢ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é

<b>–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –≤–µ—á–µ—Ä–Ω–∏–π —Ä–∏—Ç—É–∞–ª?</b>
"""
        
        keyboard = get_ritual_keyboard(str(ritual.id)) if rituals else [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="rituals_list")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            evening_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_evening_rituals: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def start_ritual(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞—Ç—å —Ä–∏—Ç—É–∞–ª."""
    try:
        user = update.effective_user
        if not user:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Ä–∏—Ç—É–∞–ª–∞
        ritual_id = update.callback_query.data.replace("ritual_start_", "")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        user_service = UserService(context.bot_data.get('session'))
        ritual_service = RitualService(context.bot_data.get('session'))
        activity_service = ActivityService(context.bot_data.get('session'))
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        db_user = await user_service.get_user_by_telegram_id(user.id)
        if not db_user:
            await update.callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∏—Ç—É–∞–ª
        ritual = await ritual_service.get_ritual_by_id(ritual_id)
        if not ritual:
            await update.callback_query.answer("‚ùå –†–∏—Ç—É–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ä–∏—Ç—É–∞–ª–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['current_ritual_id'] = ritual_id
        context.user_data['ritual_start_time'] = datetime.now()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —Ä–∏—Ç—É–∞–ª–∞
        start_text = f"""
üßò <b>–ù–∞—á–∏–Ω–∞–µ–º —Ä–∏—Ç—É–∞–ª</b>

<b>{ritual.title}</b>

<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>
{ritual.instructions}

<b>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {ritual.estimated_duration} –º–∏–Ω—É—Ç

<b>–°–æ–≤–µ—Ç—ã:</b>
‚Ä¢ –ù–∞–π–¥–∏ —Ç–∏—Ö–æ–µ –º–µ—Å—Ç–æ
‚Ä¢ –û—Ç–∫–ª—é—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–µ
‚Ä¢ –ù–µ —Ç–æ—Ä–æ–ø–∏—Å—å

<b>–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∏—Ç—É–∞–ª"</b>
"""
        
        keyboard = get_ritual_response_keyboard(ritual_id)
        
        await update.callback_query.edit_message_text(
            start_text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        await activity_service.create_activity(
            user_id=str(db_user.id),
            activity_type=ActivityType.RITUAL_STARTED,
            description=f"–†–∏—Ç—É–∞–ª '{ritual.title}' –Ω–∞—á–∞—Ç"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_ritual: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def complete_ritual(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∏—Ç—É–∞–ª."""
    try:
        user = update.effective_user
        if not user:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Ä–∏—Ç—É–∞–ª–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        ritual_id = context.user_data.get('current_ritual_id')
        if not ritual_id:
            await update.callback_query.answer("‚ùå –†–∏—Ç—É–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∏—Ç—É–∞–ª–∞
        start_time = context.user_data.get('ritual_start_time')
        if not start_time:
            await update.callback_query.answer("‚ùå –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∏—Ç—É–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        user_service = UserService(context.bot_data.get('session'))
        ritual_service = RitualService(context.bot_data.get('session'))
        activity_service = ActivityService(context.bot_data.get('session'))
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        db_user = await user_service.get_user_by_telegram_id(user.id)
        if not db_user:
            await update.callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∏—Ç—É–∞–ª
        ritual = await ritual_service.get_ritual_by_id(ritual_id)
        if not ritual:
            await update.callback_query.answer("‚ùå –†–∏—Ç—É–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        completion_time = datetime.now()
        duration = (completion_time - start_time).total_seconds() / 60  # –≤ –º–∏–Ω—É—Ç–∞—Ö
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–∏—Ç—É–∞–ª
        await ritual_service.create_ritual_response(
            user_id=str(db_user.id),
            ritual_id=ritual_id,
            response_type="completed",
            content=f"–†–∏—Ç—É–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {duration:.1f} –º–∏–Ω—É—Ç",
            completion_time=duration
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        complete_text = f"""
‚úÖ <b>–†–∏—Ç—É–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω!</b>

<b>{ritual.title}</b>

<b>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {duration:.1f} –º–∏–Ω—É—Ç
<b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è:</b> {ritual.estimated_duration} –º–∏–Ω—É—Ç

<b>–û—Ç–ª–∏—á–Ω–æ!</b> –¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª —Ä–∏—Ç—É–∞–ª –∏ —Å—Ç–∞–ª –Ω–∞ —à–∞–≥ –±–ª–∏–∂–µ –∫ —Å–≤–æ–µ–π —Ü–µ–ª–∏.

<b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>
‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∏—Ç—É–∞–ª—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
‚Ä¢ –û—Ç–º–µ—á–∞–π —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
‚Ä¢ –ù–µ —Å–¥–∞–≤–∞–π—Å—è, –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—à—å

<b>–ü–æ–º–Ω–∏:</b> –∫–∞–∂–¥—ã–π —Ä–∏—Ç—É–∞–ª - —ç—Ç–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ —Å–µ–±—è! üí™
"""
        
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∏—Ç—É–∞–ª–æ–≤", callback_data="ritual_stats")],
            [InlineKeyboardButton("üßò –ï—â–µ —Ä–∏—Ç—É–∞–ª", callback_data="rituals_list")],
            [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            complete_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        await activity_service.create_activity(
            user_id=str(db_user.id),
            activity_type=ActivityType.RITUAL_COMPLETED,
            description=f"–†–∏—Ç—É–∞–ª '{ritual.title}' –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {duration:.1f} –º–∏–Ω—É—Ç"
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context.user_data.pop('current_ritual_id', None)
        context.user_data.pop('ritual_start_time', None)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ complete_ritual: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def skip_ritual(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ä–∏—Ç—É–∞–ª."""
    try:
        user = update.effective_user
        if not user:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Ä–∏—Ç—É–∞–ª–∞
        ritual_id = update.callback_query.data.replace("ritual_skip_", "")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        user_service = UserService(context.bot_data.get('session'))
        ritual_service = RitualService(context.bot_data.get('session'))
        activity_service = ActivityService(context.bot_data.get('session'))
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        db_user = await user_service.get_user_by_telegram_id(user.id)
        if not db_user:
            await update.callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∏—Ç—É–∞–ª
        ritual = await ritual_service.get_ritual_by_id(ritual_id)
        if not ritual:
            await update.callback_query.answer("‚ùå –†–∏—Ç—É–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–∏—Ç—É–∞–ª (–ø—Ä–æ–ø—É—â–µ–Ω)
        await ritual_service.create_ritual_response(
            user_id=str(db_user.id),
            ritual_id=ritual_id,
            response_type="skipped",
            content="–†–∏—Ç—É–∞–ª –ø—Ä–æ–ø—É—â–µ–Ω"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–ø—É—Å–∫–µ
        skip_text = f"""
‚è≠Ô∏è <b>–†–∏—Ç—É–∞–ª –ø—Ä–æ–ø—É—â–µ–Ω</b>

<b>{ritual.title}</b>

–ü–æ–Ω–∏–º–∞–µ–º, —á—Ç–æ –∏–Ω–æ–≥–¥–∞ –±—ã–≤–∞–µ—Ç —Å–ª–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤—Ä–µ–º—è –¥–ª—è —Ä–∏—Ç—É–∞–ª–æ–≤.

<b>–ü–æ–º–Ω–∏:</b> —Ä–∏—Ç—É–∞–ª—ã –ø–æ–º–æ–≥–∞—é—Ç:
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å
‚Ä¢ –ü–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏
‚Ä¢ –û—Å—Ç–∞—Ç—å—Å—è –≤ —Ä–∏—Ç–º–µ

<b>–¢—ã –º–æ–∂–µ—à—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∏—Ç—É–∞–ª –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è</b>

–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?
"""
        
        keyboard = [
            [InlineKeyboardButton("üßò –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∏—Ç—É–∞–ª", callback_data="rituals_list")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∏—Ç—É–∞–ª–æ–≤", callback_data="ritual_stats")],
            [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            skip_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        await activity_service.create_activity(
            user_id=str(db_user.id),
            activity_type=ActivityType.RITUAL_SKIPPED,
            description=f"–†–∏—Ç—É–∞–ª '{ritual.title}' –ø—Ä–æ–ø—É—â–µ–Ω"
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context.user_data.pop('current_ritual_id', None)
        context.user_data.pop('ritual_start_time', None)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ skip_ritual: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def cancel_ritual(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ä–∏—Ç—É–∞–ª."""
    try:
        user = update.effective_user
        if not user:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Ä–∏—Ç—É–∞–ª–∞
        ritual_id = update.callback_query.data.replace("ritual_cancel_", "")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        user_service = UserService(context.bot_data.get('session'))
        ritual_service = RitualService(context.bot_data.get('session'))
        activity_service = ActivityService(context.bot_data.get('session'))
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        db_user = await user_service.get_user_by_telegram_id(user.id)
        if not db_user:
            await update.callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∏—Ç—É–∞–ª
        ritual = await ritual_service.get_ritual_by_id(ritual_id)
        if not ritual:
            await update.callback_query.answer("‚ùå –†–∏—Ç—É–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
        cancel_text = f"""
‚ùå <b>–†–∏—Ç—É–∞–ª –æ—Ç–º–µ–Ω–µ–Ω</b>

<b>{ritual.title}</b>

–†–∏—Ç—É–∞–ª –æ—Ç–º–µ–Ω–µ–Ω. –¢—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –µ–≥–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.

<b>–ü–æ–º–Ω–∏:</b> —Ä–∏—Ç—É–∞–ª—ã - —ç—Ç–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ, –∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è.

–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?
"""
        
        keyboard = [
            [InlineKeyboardButton("üßò –ù–∞—á–∞—Ç—å —Ä–∏—Ç—É–∞–ª", callback_data=f"ritual_start_{ritual_id}")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∏—Ç—É–∞–ª–æ–≤", callback_data="ritual_stats")],
            [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            cancel_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        await activity_service.create_activity(
            user_id=str(db_user.id),
            activity_type=ActivityType.RITUAL_CANCELLED,
            description=f"–†–∏—Ç—É–∞–ª '{ritual.title}' –æ—Ç–º–µ–Ω–µ–Ω"
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context.user_data.pop('current_ritual_id', None)
        context.user_data.pop('ritual_start_time', None)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_ritual: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def show_ritual_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∏—Ç—É–∞–ª–æ–≤."""
    try:
        user = update.effective_user
        if not user:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        user_service = UserService(context.bot_data.get('session'))
        ritual_service = RitualService(context.bot_data.get('session'))
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        db_user = await user_service.get_user_by_telegram_id(user.id)
        if not db_user:
            await update.callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∏—Ç—É–∞–ª–æ–≤
        stats = await ritual_service.get_user_ritual_stats(str(db_user.id), 30)
        
        stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∏—Ç—É–∞–ª–æ–≤</b>

<b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:</b>

üßò <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–∏—Ç—É–∞–ª–æ–≤: {stats.get('completed_rituals', 0)}
‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ä–∏—Ç—É–∞–ª–æ–≤: {stats.get('skipped_rituals', 0)}
‚Ä¢ –í—Å–µ–≥–æ —Ä–∏—Ç—É–∞–ª–æ–≤: {stats.get('total_rituals', 0)}

üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {stats.get('completion_rate', 0):.1f}%
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {stats.get('avg_completion_time', 0):.1f} –º–∏–Ω—É—Ç

<b>–ê–Ω–∞–ª–∏–∑:</b>
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑
        if stats.get('completion_rate', 0) > 80:
            stats_text += "‚Ä¢ –û—Ç–ª–∏—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! –¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏ üéâ\n"
        elif stats.get('completion_rate', 0) > 50:
            stats_text += "‚Ä¢ –•–æ—Ä–æ—à–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ üëç\n"
        else:
            stats_text += "‚Ä¢ –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏! –ü–æ–ø—Ä–æ–±—É–π –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∏—Ç—É–∞–ª—ã —á–∞—â–µ üìà\n"
        
        if stats.get('avg_completion_time', 0) > 0:
            stats_text += "‚Ä¢ –¢—ã —Ç—Ä–∞—Ç–∏—à—å –≤—Ä–µ–º—è –Ω–∞ —Ä–∏—Ç—É–∞–ª—ã - —ç—Ç–æ —Ö–æ—Ä–æ—à–æ! ‚è∞\n"
        else:
            stats_text += "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∏—Ç—É–∞–ª—ã –±–æ–ª–µ–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ üßò\n"
        
        keyboard = get_ritual_stats_keyboard()
        
        await update.callback_query.edit_message_text(
            stats_text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_ritual_stats: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def show_ritual_stats_detail(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∏—Ç—É–∞–ª–æ–≤."""
    try:
        user = update.effective_user
        if not user:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_type = update.callback_query.data.replace("ritual_stats_", "")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        user_service = UserService(context.bot_data.get('session'))
        ritual_service = RitualService(context.bot_data.get('session'))
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        db_user = await user_service.get_user_by_telegram_id(user.id)
        if not db_user:
            await update.callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if stats_type == "general":
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = await ritual_service.get_user_ritual_stats(str(db_user.id), 30)
            
            stats_text = f"""
üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∏—Ç—É–∞–ª–æ–≤</b>

<b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:</b>
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats.get('completed_rituals', 0)}
‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats.get('skipped_rituals', 0)}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {stats.get('completion_rate', 0):.1f}%
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {stats.get('avg_completion_time', 0):.1f} –º–∏–Ω

<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
"""
            
            if stats.get('completion_rate', 0) > 80:
                stats_text += "‚Ä¢ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ üéâ\n"
            elif stats.get('completion_rate', 0) > 50:
                stats_text += "‚Ä¢ –•–æ—Ä–æ—à–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! –ü–æ–ø—Ä–æ–±—É–π —É–≤–µ–ª–∏—á–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É üëç\n"
            else:
                stats_text += "‚Ä¢ –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã! –ù–∞—á–Ω–∏ —Å –º–∞–ª–æ–≥–æ üìà\n"
        
        elif stats_type == "morning":
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ä–∏—Ç—É–∞–ª–æ–≤
            stats = await ritual_service.get_user_ritual_stats_by_type(str(db_user.id), RitualType.MORNING, 30)
            
            stats_text = f"""
üåÖ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ä–∏—Ç—É–∞–ª–æ–≤</b>

<b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:</b>
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats.get('completed_rituals', 0)}
‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats.get('skipped_rituals', 0)}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {stats.get('completion_rate', 0):.1f}%

<b>–ü–æ–ª—å–∑–∞ —É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ä–∏—Ç—É–∞–ª–æ–≤:</b>
‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å
‚Ä¢ –î–∞—é—Ç —ç–Ω–µ—Ä–≥–∏—é –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é
‚Ä¢ –ü–æ–º–æ–≥–∞—é—Ç —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ü–µ–ª—è—Ö
"""
        
        elif stats_type == "evening":
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ—á–µ—Ä–Ω–∏—Ö —Ä–∏—Ç—É–∞–ª–æ–≤
            stats = await ritual_service.get_user_ritual_stats_by_type(str(db_user.id), RitualType.EVENING, 30)
            
            stats_text = f"""
üåô <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ—á–µ—Ä–Ω–∏—Ö —Ä–∏—Ç—É–∞–ª–æ–≤</b>

<b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:</b>
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats.get('completed_rituals', 0)}
‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats.get('skipped_rituals', 0)}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {stats.get('completion_rate', 0):.1f}%

<b>–ü–æ–ª—å–∑–∞ –≤–µ—á–µ—Ä–Ω–∏—Ö —Ä–∏—Ç—É–∞–ª–æ–≤:</b>
‚Ä¢ –ü–æ–º–æ–≥–∞—é—Ç –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏ –¥–Ω—è
‚Ä¢ –î–∞—é—Ç –≤—Ä–µ–º—è –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç –Ω–∞ —Å–ø–æ–∫–æ–π–Ω—ã–π —Å–æ–Ω
"""
        
        elif stats_type == "progress":
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            stats = await ritual_service.get_user_ritual_progress(str(db_user.id), 30)
            
            stats_text = f"""
üìà <b>–ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–∏—Ç—É–∞–ª–æ–≤</b>

<b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:</b>
‚Ä¢ –î–Ω–µ–π —Å —Ä–∏—Ç—É–∞–ª–∞–º–∏: {stats.get('days_with_rituals', 0)}
‚Ä¢ –°–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è —Å–µ—Ä–∏—è: {stats.get('longest_streak', 0)} –¥–Ω–µ–π
‚Ä¢ –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {stats.get('current_streak', 0)} –¥–Ω–µ–π

<b>–¢—Ä–µ–Ω–¥:</b>
"""
            
            if stats.get('current_streak', 0) > 7:
                stats_text += "‚Ä¢ –û—Ç–ª–∏—á–Ω–∞—è —Å–µ—Ä–∏—è! –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–π –µ—ë üî•\n"
            elif stats.get('current_streak', 0) > 3:
                stats_text += "‚Ä¢ –•–æ—Ä–æ—à–∞—è —Å–µ—Ä–∏—è! –ü—Ä–æ–¥–æ–ª–∂–∞–π üí™\n"
            else:
                stats_text += "‚Ä¢ –ù–∞—á–Ω–∏ –Ω–æ–≤—É—é —Å–µ—Ä–∏—é! –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤–∞–∂–µ–Ω üìÖ\n"
        
        else:
            stats_text = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        
        keyboard = [
            [InlineKeyboardButton("üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ —Ä–∏—Ç—É–∞–ª–æ–≤", callback_data="ritual_stats")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            stats_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_ritual_stats_detail: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ (—É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞)
