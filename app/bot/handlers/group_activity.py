"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –≥—Ä—É–ø–ø–µ.

–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ "–Ø–î–†–û –ö–õ–£–ë–ê / –û–°–ù–û–í–ê PUT–ò"
–¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
"""

from datetime import datetime, date
from telegram import Update
from telegram.ext import ContextTypes, MessageHandler, filters
from loguru import logger

from app.core.database import get_db_session
from app.services import ActivityService, UserService
from app.models.activity import ActivityType
from config.settings import get_settings


async def group_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
    
    Args:
        update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã
        if not update.message or not update.message.chat:
            return
            
        chat_id = str(update.message.chat.id)
        settings = get_settings()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø—ã
        if chat_id != settings.GROUP_ID:
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –±–æ—Ç
        if update.message.from_user.is_bot:
            return
            
        user = update.message.from_user
        message = update.message
        
        logger.info(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} (@{user.username}): {message.text[:50] if message.text else '–º–µ–¥–∏–∞'}")
        
        async with get_db_session() as session:
            user_service = UserService(session)
            activity_service = ActivityService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user = await user_service.get_user_by_telegram_id(user.id)
            if not db_user:
                logger.info(f"–°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –≥—Ä—É–ø–ø–µ")
                from app.schemas.user import UserCreate
                
                user_data = UserCreate(
                    telegram_id=user.id,
                    username=user.username,
                    first_name=user.first_name,
                    last_name=user.last_name,
                    status="active",
                    is_in_group=True,
                    joined_group_at=datetime.now()
                )
                db_user = await user_service.create_user(user_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–∏—è –≤ –≥—Ä—É–ø–ø–µ
            if not db_user.is_in_group:
                from app.schemas.user import UserUpdate
                await user_service.update_user(str(db_user.id), UserUpdate(
                    is_in_group=True,
                    joined_group_at=datetime.now()
                ))
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫ –≥—Ä—É–ø–ø—ã")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            activity_type = ActivityType.MESSAGE
            
            if message.photo:
                activity_type = ActivityType.PHOTO
            elif message.video:
                activity_type = ActivityType.VIDEO
            elif message.document:
                activity_type = ActivityType.DOCUMENT
            elif message.voice:
                activity_type = ActivityType.VOICE
            elif message.sticker:
                activity_type = ActivityType.STICKER
            elif message.poll:
                activity_type = ActivityType.POLL
            elif message.forward_from or message.forward_from_chat:
                activity_type = ActivityType.FORWARD
            elif message.reply_to_message:
                activity_type = ActivityType.REPLY
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            from app.schemas.activity import ChatActivityCreate
            
            activity_data = ChatActivityCreate(
                user_id=str(db_user.id),
                chat_id=chat_id,
                message_id=message.message_id,
                activity_type=activity_type,
                message_text=message.text or message.caption or "",
                message_length=len(message.text or message.caption or ""),
                activity_date=date.today(),
                activity_hour=datetime.now().hour,
                is_reply=bool(message.reply_to_message),
                is_forward=bool(message.forward_from or message.forward_from_chat)
            )
            
            await activity_service.create_chat_activity(activity_data)
            logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity_type} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã: {e}")


async def group_member_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã.
    
    Args:
        update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    try:
        if not update.message or not update.message.new_chat_members:
            return
            
        chat_id = str(update.message.chat.id)
        settings = get_settings()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à–∞ –≥—Ä—É–ø–ø–∞
        if chat_id != settings.GROUP_ID:
            return
            
        for new_member in update.message.new_chat_members:
            if new_member.is_bot:
                continue
                
            logger.info(f"üëã –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –≥—Ä—É–ø–ø—ã: {new_member.id} (@{new_member.username})")
            
            async with get_db_session() as session:
                user_service = UserService(session)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                db_user = await user_service.get_user_by_telegram_id(new_member.id)
                if not db_user:
                    from app.schemas.user import UserCreate
                    
                    user_data = UserCreate(
                        telegram_id=new_member.id,
                        username=new_member.username,
                        first_name=new_member.first_name,
                        last_name=new_member.last_name,
                        status="active",
                        is_in_group=True,
                        joined_group_at=datetime.now()
                    )
                    await user_service.create_user(user_data)
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–∏—è –≤ –≥—Ä—É–ø–ø–µ
                    from app.schemas.user import UserUpdate
                    await user_service.update_user(str(db_user.id), UserUpdate(
                        is_in_group=True,
                        joined_group_at=datetime.now()
                    ))
                
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_member.id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã: {e}")


async def group_left_member_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø–æ–∫–∏–Ω—É–≤—à–∏—Ö –≥—Ä—É–ø–ø—É.
    
    Args:
        update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    try:
        if not update.message or not update.message.left_chat_member:
            return
            
        chat_id = str(update.message.chat.id)
        settings = get_settings()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à–∞ –≥—Ä—É–ø–ø–∞
        if chat_id != settings.GROUP_ID:
            return
            
        left_member = update.message.left_chat_member
        if left_member.is_bot:
            return
            
        logger.info(f"üëã –£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É: {left_member.id} (@{left_member.username})")
        
        async with get_db_session() as session:
            user_service = UserService(session)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–∏—è –≤ –≥—Ä—É–ø–ø–µ
            db_user = await user_service.get_user_by_telegram_id(left_member.id)
            if db_user:
                from app.schemas.user import UserUpdate
                await user_service.update_user(str(db_user.id), UserUpdate(
                    is_in_group=False
                ))
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {left_member.id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø–æ–∫–∏–Ω—É–≤—à–∏–π –≥—Ä—É–ø–ø—É")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –ø–æ–∫–∏–Ω—É–≤—à–µ–≥–æ –≥—Ä—É–ø–ø—É: {e}")


# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
group_message_handler_func = group_message_handler
group_member_handler_func = group_member_handler
group_left_member_handler_func = group_left_member_handler
