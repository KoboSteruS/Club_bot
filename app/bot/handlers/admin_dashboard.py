"""
–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª–µ.
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from loguru import logger
from datetime import datetime, timedelta

from app.core.database import get_db_session
from app.services.user_service import UserService
from app.services.payment_service import PaymentService
from app.services.activity_service import ActivityService
from app.services.telegram_service import TelegramService
from config.settings import get_settings


async def admin_dashboard_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin - –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."""
    try:
        settings = get_settings()
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        if user_id not in settings.admin_ids_list:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        async with get_db_session() as session:
            user_service = UserService(session)
            payment_service = PaymentService(session)
            activity_service = ActivityService(session)
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            total_users = await user_service.get_total_users_count()
            active_users = await user_service.get_active_users_count()
            premium_users = await user_service.get_premium_users_count()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            yesterday = datetime.utcnow() - timedelta(days=1)
            new_users_today = await user_service.get_new_users_count_since(yesterday)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
            total_payments = await payment_service.get_total_payments_count()
            successful_payments = await payment_service.get_successful_payments_count()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            active_today = await activity_service.get_active_users_count_since(yesterday)
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            message = f"""
üìä <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –û–°–ù–û–í–ê –ü–£–¢–ò</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: {total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}
‚Ä¢ Premium: {premium_users}
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ 24—á: {new_users_today}

üí≥ <b>–ü–ª–∞—Ç–µ–∂–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: {total_payments}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {successful_payments}

‚ö° <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: {active_today}

üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}
"""
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
                [InlineKeyboardButton("üí≥ –ü–ª–∞—Ç–µ–∂–∏", callback_data="admin_payments")],
                [InlineKeyboardButton("üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="admin_activity")],
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_refresh")],
                [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")]
            ])
            
            await update.message.reply_text(message, reply_markup=keyboard, parse_mode='HTML')
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_dashboard_handler: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")


async def admin_users_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    try:
        query = update.callback_query
        await query.answer()
        
        settings = get_settings()
        user_id = query.from_user.id
        
        if user_id not in settings.admin_ids_list:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        async with get_db_session() as session:
            user_service = UserService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            recent_users = await user_service.get_recent_users(limit=10)
            
            message = "üë• <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n"
            
            for user in recent_users:
                status_emoji = "‚úÖ" if user.status == "active" else "‚è≥"
                premium_emoji = "üíé" if user.is_premium else "üîì"
                
                message += f"{status_emoji} {premium_emoji} <b>{user.first_name}</b>"
                if user.username:
                    message += f" (@{user.username})"
                message += f"\nID: {user.telegram_id}\n"
                message += f"–°—Ç–∞—Ç—É—Å: {user.status}\n"
                message += f"–î–æ–±–∞–≤–ª–µ–Ω: {user.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏", callback_data="admin_dashboard")]
            ])
            
            await query.edit_message_text(message, reply_markup=keyboard, parse_mode='HTML')
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_users_handler: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")


async def admin_payments_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–ª–∞—Ç–µ–∂–∏' –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    try:
        query = update.callback_query
        await query.answer()
        
        settings = get_settings()
        user_id = query.from_user.id
        
        if user_id not in settings.admin_ids_list:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        async with get_db_session() as session:
            payment_service = PaymentService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π
            total_amount = await payment_service.get_total_payments_amount()
            today_amount = await payment_service.get_today_payments_amount()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏
            recent_payments = await payment_service.get_recent_payments(limit=5)
            
            message = f"""üí≥ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π:</b>

üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:.2f} USDT
üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {today_amount:.2f} USDT

<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏:</b>
"""
            
            for payment in recent_payments:
                status_emoji = "‚úÖ" if payment.status == "paid" else "‚è≥"
                message += f"\n{status_emoji} {payment.amount} {payment.currency}"
                message += f" - {payment.status}"
                if payment.paid_at:
                    message += f" ({payment.paid_at.strftime('%d.%m %H:%M')})"
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏", callback_data="admin_dashboard")]
            ])
            
            await query.edit_message_text(message, reply_markup=keyboard, parse_mode='HTML')
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_payments_handler: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π.")


async def admin_activity_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å' –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    try:
        query = update.callback_query
        await query.answer()
        
        settings = get_settings()
        user_id = query.from_user.id
        
        if user_id not in settings.admin_ids_list:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        async with get_db_session() as session:
            activity_service = ActivityService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            today = datetime.utcnow().date()
            yesterday = (datetime.utcnow() - timedelta(days=1)).date()
            
            activity_today = await activity_service.get_activity_stats_for_date(today)
            activity_yesterday = await activity_service.get_activity_stats_for_date(yesterday)
            
            message = f"""üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª–µ:</b>

üìÖ <b>–°–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m.%Y')}):</b>
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {activity_today.get('messages', 0)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {activity_today.get('active_users', 0)}

üìÖ <b>–í—á–µ—Ä–∞ ({yesterday.strftime('%d.%m.%Y')}):</b>
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {activity_yesterday.get('messages', 0)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {activity_yesterday.get('active_users', 0)}

‚ö° <b>–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é:</b>
"""
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            top_users = await activity_service.get_top_active_users(days=7, limit=5)
            
            for i, user in enumerate(top_users, 1):
                message += f"{i}. {user.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} - {user.get('activity_count', 0)} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏", callback_data="admin_dashboard")]
            ])
            
            await query.edit_message_text(message, reply_markup=keyboard, parse_mode='HTML')
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_activity_handler: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")


async def admin_refresh_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–±–Ω–æ–≤–∏—Ç—å' –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    try:
        query = update.callback_query
        await query.answer("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...")
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é –ø–∞–Ω–µ–ª—å
        await admin_dashboard_handler(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_refresh_handler: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")


async def admin_broadcast_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–†–∞—Å—Å—ã–ª–∫–∞' –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    try:
        query = update.callback_query
        await query.answer()
        
        settings = get_settings()
        user_id = query.from_user.id
        
        if user_id not in settings.admin_ids_list:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        message = """üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:

‚Ä¢ –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
‚Ä¢ –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–º
‚Ä¢ –¢–æ–ª—å–∫–æ premium
‚Ä¢ –ü–æ —Å—Ç–∞—Ç—É—Å—É –ø–æ–¥–ø–∏—Å–∫–∏
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üë• –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="broadcast_all")],
            [InlineKeyboardButton("‚úÖ –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–º", callback_data="broadcast_active")],
            [InlineKeyboardButton("üíé –¢–æ–ª—å–∫–æ premium", callback_data="broadcast_premium")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏", callback_data="admin_dashboard")]
        ])
        
        await query.edit_message_text(message, reply_markup=keyboard, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_broadcast_handler: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏.")
