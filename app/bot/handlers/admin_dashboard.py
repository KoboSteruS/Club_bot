"""
–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª–µ.
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from loguru import logger
from datetime import datetime, timedelta

from app.core.database import get_db_session
from app.services.user_service import UserService
from app.services.payment_service import PaymentService
from app.services.activity_service import ActivityService
from app.services.telegram_service import TelegramService
from app.services.group_management_service import GroupManagementService
from config.settings import get_settings


async def safe_answer_callback(query, text: str = None) -> bool:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callback query —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
    
    Args:
        query: Callback query –æ–±—ä–µ–∫—Ç
        text: –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        bool: True –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
    """
    try:
        await query.answer(text=text)
        return True
    except Exception as e:
        if "Query is too old" in str(e) or "query id is invalid" in str(e):
            logger.warning(f"–£—Å—Ç–∞—Ä–µ–≤—à–∏–π callback query: {e}")
            return False
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback query: {e}")
            return False


async def admin_dashboard_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin - –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."""
    try:
        settings = get_settings()
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        if user_id not in settings.admin_ids_list:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ message (–∫–æ–º–∞–Ω–¥–∞) –∏–ª–∏ —ç—Ç–æ callback query
            if update.message:
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            elif update.callback_query:
                await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        async with get_db_session() as session:
            user_service = UserService(session)
            payment_service = PaymentService(session)
            activity_service = ActivityService(session)
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            total_users = await user_service.get_total_users_count()
            active_users = await user_service.get_active_users_count()
            premium_users = await user_service.get_premium_users_count()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            yesterday = datetime.utcnow() - timedelta(days=1)
            new_users_today = await user_service.get_new_users_count_since(yesterday)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
            total_payments = await payment_service.get_total_payments_count()
            successful_payments = await payment_service.get_successful_payments_count()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            active_today = await activity_service.get_active_users_count_since(yesterday)
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            message = f"""
üìä <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –û–°–ù–û–í–ê –ü–£–¢–ò</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: {total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}
‚Ä¢ Premium: {premium_users}
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ 24—á: {new_users_today}

üí≥ <b>–ü–ª–∞—Ç–µ–∂–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: {total_payments}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {successful_payments}

‚ö° <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: {active_today}

üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}
"""
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
                [InlineKeyboardButton("üîë –í—ã–¥–∞—á–∞ –¥–æ—Å—Ç—É–ø–∞", callback_data="admin_access")],
                [InlineKeyboardButton("üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", callback_data="admin_management")],
                [InlineKeyboardButton("üö´ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="admin_check_subscriptions")],
                [InlineKeyboardButton("üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="admin_activity")],
                [InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", callback_data="admin_send_to_group")],
                [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_refresh")]
            ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ update
            if update.message:
                await update.message.reply_text(message, reply_markup=keyboard, parse_mode='HTML')
            elif update.callback_query:
                await update.callback_query.edit_message_text(message, reply_markup=keyboard, parse_mode='HTML')
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_dashboard_handler: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ update
        if update.message:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        elif update.callback_query:
            await update.callback_query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")


async def admin_users_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    try:
        query = update.callback_query
        await safe_answer_callback(query)
        
        settings = get_settings()
        user_id = query.from_user.id
        
        if user_id not in settings.admin_ids_list:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        async with get_db_session() as session:
            user_service = UserService(session)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
            page = 0
            if query.data and query.data.startswith("admin_users_page_"):
                try:
                    page = int(query.data.split("_")[-1])
                except (ValueError, IndexError):
                    page = 0
            elif query.data == "admin_users_current":
                # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_users = await user_service.get_total_users_count()
            active_users = await user_service.get_active_users_count()
            premium_users = await user_service.get_premium_users_count()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            users_per_page = 10
            recent_users = await user_service.get_recent_users(limit=users_per_page, offset=page * users_per_page)
            
            message = f"""üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ: {total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}
‚Ä¢ Premium: {premium_users}

üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç—Ä. {page + 1}):</b>
"""
            
            for i, user in enumerate(recent_users, 1):
                status_emoji = "‚úÖ" if user.status == "active" else "‚è≥"
                premium_emoji = "üíé" if user.is_premium else "üîì"
                channel_emoji = "üì¢" if user.is_subscribed_to_channel else "‚ùå"
                
                message += f"{i}. {status_emoji} {premium_emoji} {channel_emoji} <b>{user.first_name}</b>"
                if user.username:
                    message += f" (@{user.username})"
                message += f"\n   ID: {user.telegram_id}\n"
                message += f"   –°—Ç–∞—Ç—É—Å: {user.status}\n"
                if user.subscription_until:
                    message += f"   –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {user.subscription_until.strftime('%d.%m.%Y')}\n"
                message += f"   –î–æ–±–∞–≤–ª–µ–Ω: {user.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            keyboard_buttons = []
            
            # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            nav_buttons = []
            if page > 0:
                nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"admin_users_page_{page-1}"))
            nav_buttons.append(InlineKeyboardButton(f"{page + 1}", callback_data="admin_users_current"))
            if len(recent_users) == users_per_page:
                nav_buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"admin_users_page_{page+1}"))
            
            if nav_buttons:
                keyboard_buttons.append(nav_buttons)
            
            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            keyboard_buttons.extend([
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_users")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏", callback_data="admin_dashboard")]
            ])
            
            keyboard = InlineKeyboardMarkup(keyboard_buttons)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await query.edit_message_text(message, reply_markup=keyboard, parse_mode='HTML')
            except Exception as edit_error:
                if "Message is not modified" in str(edit_error):
                    # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                    await safe_answer_callback(query, "üìã –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
                else:
                    # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º
                    raise edit_error
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_users_handler: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")


async def admin_access_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í—ã–¥–∞—á–∞ –¥–æ—Å—Ç—É–ø–∞' –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    try:
        query = update.callback_query
        await safe_answer_callback(query)
        
        settings = get_settings()
        user_id = query.from_user.id
        
        if user_id not in settings.admin_ids_list:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        async with get_db_session() as session:
            user_service = UserService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç—É–ø–∞
            total_users = await user_service.get_total_users_count()
            active_users = await user_service.get_active_users_count()
            premium_users = await user_service.get_premium_users_count()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞
            pending_users = await user_service.get_users_by_status("pending")
            
            message = f"""üîë <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚Ä¢ –° –∞–∫—Ç–∏–≤–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º: {active_users}
‚Ä¢ Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {premium_users}

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ ({len(pending_users)}):</b>
"""
            
            for user in pending_users[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 5
                channel_emoji = "üì¢" if user.is_subscribed_to_channel else "‚ùå"
                message += f"\n{channel_emoji} <b>{user.first_name}</b>"
                if user.username:
                    message += f" (@{user.username})"
                message += f"\nID: {user.telegram_id}"
                message += f" | –î–æ–±–∞–≤–ª–µ–Ω: {user.created_at.strftime('%d.%m %H:%M')}"
            
            if len(pending_users) > 5:
                message += f"\n\n... –∏ –µ—â–µ {len(pending_users) - 5} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –í—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –≤—Å–µ–º", callback_data="admin_give_access_all")],
                [InlineKeyboardButton("üë§ –í—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ ID", callback_data="admin_give_access_by_id")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ ID", callback_data="admin_revoke_access_by_id")],
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_access")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏", callback_data="admin_dashboard")]
            ])
            
            await query.edit_message_text(message, reply_markup=keyboard, parse_mode='HTML')
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_access_handler: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º.")


async def admin_give_access_all_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–¥–∞—á–∏ –¥–æ—Å—Ç—É–ø–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    try:
        query = update.callback_query
        await safe_answer_callback(query, "‚è≥ –í—ã–¥–∞–µ–º –¥–æ—Å—Ç—É–ø –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
        
        settings = get_settings()
        user_id = query.from_user.id
        
        if user_id not in settings.admin_ids_list:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        async with get_db_session() as session:
            user_service = UserService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending
            pending_users = await user_service.get_users_by_status("pending")
            
            if not pending_users:
                await query.edit_message_text("‚úÖ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–¥–∞—á–∏ –¥–æ—Å—Ç—É–ø–∞.")
                return
            
            # –í—ã–¥–∞–µ–º –¥–æ—Å—Ç—É–ø –≤—Å–µ–º
            updated_count = 0
            from datetime import datetime, timedelta
            from app.schemas.user import UserUpdate
            
            for user in pending_users:
                try:
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å active –∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 30 –¥–Ω–µ–π
                    subscription_until = datetime.now() + timedelta(days=30)
                    
                    await user_service.update_user(str(user.id), UserUpdate(
                        status="active",
                        is_premium=True,
                        subscription_until=subscription_until
                    ))
                    updated_count += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
            
            message = f"""‚úÖ <b>–î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!</b>

üë• –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {updated_count}
üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {(datetime.now() + timedelta(days=30)).strftime('%d.%m.%Y')}

–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–µ–ø–µ—Ä—å –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –∫–ª—É–±–∞.
"""
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –¥–æ—Å—Ç—É–ø–æ–º", callback_data="admin_access")],
                [InlineKeyboardButton("üîô –ö –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="admin_dashboard")]
            ])
            
            await query.edit_message_text(message, reply_markup=keyboard, parse_mode='HTML')
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_give_access_all_handler: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –¥–æ—Å—Ç—É–ø–∞.")


async def admin_give_access_by_id_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–¥–∞—á–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        query = update.callback_query
        await safe_answer_callback(query, "üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –¥–æ—Å—Ç—É–ø–∞")
        
        settings = get_settings()
        user_id = query.from_user.id
        
        if user_id not in settings.admin_ids_list:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message = """üë§ <b>–í—ã–¥–∞—á–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ ID</b>

–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø.

<b>–ü—Ä–∏–º–µ—Ä:</b> <code>123456789</code>

üí° <b>–ö–∞–∫ –Ω–∞–π—Ç–∏ ID:</b>
‚Ä¢ –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É @userinfobot
‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –ª–æ–≥–∞—Ö –±–æ—Ç–∞

–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏"."""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏", callback_data="admin_dashboard")]
        ])
        
        await query.edit_message_text(message, reply_markup=keyboard, parse_mode='HTML')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ ID
        context.user_data['waiting_for_user_id'] = True
        logger.info(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_user_id=True –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_give_access_by_id_handler: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")


async def handle_user_id_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –¥–æ—Å—Ç—É–ø–∞."""
    logger.info(f"üöÄ –ù–ê–ß–ê–õ–û handle_user_id_input –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    logger.info(f"üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã - TelegramService –¥–æ—Å—Ç—É–ø–µ–Ω: {TelegramService is not None}")
    logger.info(f"üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã - GroupManagementService –¥–æ—Å—Ç—É–ø–µ–Ω: {GroupManagementService is not None}")
    
    try:
        logger.info(f"üîç handle_user_id_input –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
        logger.info(f"   –°–æ—Å—Ç–æ—è–Ω–∏–µ: waiting_for_user_id={context.user_data.get('waiting_for_user_id', False)}")
        logger.info(f"   –°–æ—Å—Ç–æ—è–Ω–∏–µ: waiting_for_revoke_user_id={context.user_data.get('waiting_for_revoke_user_id', False)}")
        logger.info(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ ID –¥–ª—è –≤—ã–¥–∞—á–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞
        if not (context.user_data.get('waiting_for_user_id', False) or 
                context.user_data.get('waiting_for_revoke_user_id', False)):
            logger.info("   ‚ùå –ù–µ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ ID, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        
        # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –æ—Ç–º–µ–Ω—É –¥–æ—Å—Ç—É–ø–∞, –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        if context.user_data.get('waiting_for_revoke_user_id', False):
            await handle_revoke_user_id_input(update, context)
            return
            
        user_message = update.message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
        try:
            target_user_id = int(user_message)
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n"
                "–ü—Ä–∏–º–µ—Ä: <code>123456789</code>",
                parse_mode='HTML'
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        settings = get_settings()
        admin_id = update.effective_user.id
        
        if admin_id not in settings.admin_ids_list:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            context.user_data['waiting_for_user_id'] = False
            return
        
        async with get_db_session() as session:
            user_service = UserService(session)
            
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
            target_user = await user_service.get_user_by_telegram_id(target_user_id)
            
            if not target_user:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ - –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ, –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å...")
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ Telegram API
                    telegram_service = TelegramService(context.bot)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥—Ä—É–ø–ø–µ
                    try:
                        chat_member = await context.bot.get_chat_member(
                            chat_id=int(settings.GROUP_ID),
                            user_id=target_user_id
                        )
                        
                        if chat_member.status in ['left', 'kicked']:
                            await update.message.reply_text(
                                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{target_user_id}</code> –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ.\n\n"
                                "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É, –∑–∞—Ç–µ–º –≤—ã–¥–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø.",
                                parse_mode='HTML'
                            )
                            context.user_data['waiting_for_user_id'] = False
                            return
                        
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥—Ä—É–ø–ø–µ - —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ
                        from app.schemas.user import UserCreate
                        from datetime import datetime
                        
                        user_data = UserCreate(
                            telegram_id=target_user_id,
                            username=chat_member.user.username,
                            first_name=chat_member.user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                            last_name=chat_member.user.last_name,
                            status="pending"  # –°–Ω–∞—á–∞–ª–∞ pending, –ø–æ—Ç–æ–º —Å—Ç–∞–Ω–µ—Ç active
                        )
                        
                        target_user = await user_service.create_user(user_data)
                        logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} (@{target_user.username})")
                        
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {target_user_id}: {e}")
                        await update.message.reply_text(
                            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å ID <code>{target_user_id}</code>.\n\n"
                            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ID –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –≥—Ä—É–ø–ø–µ.",
                            parse_mode='HTML'
                        )
                        context.user_data['waiting_for_user_id'] = False
                        return
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}: {e}")
                    await update.message.reply_text(
                        f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID <code>{target_user_id}</code>.\n\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
                        parse_mode='HTML'
                    )
                    context.user_data['waiting_for_user_id'] = False
                    return
            
            # –í—ã–¥–∞–µ–º –¥–æ—Å—Ç—É–ø
            from datetime import datetime, timedelta
            from app.schemas.user import UserUpdate
            
            subscription_until = datetime.now() + timedelta(days=30)
            
            await user_service.update_user(str(target_user.id), UserUpdate(
                status="active",
                is_premium=True,
                subscription_until=subscription_until
            ))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª
            was_created = target_user.status == "pending" and target_user.is_premium == False
            
            success_message = f"""‚úÖ <b>–î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {target_user.first_name}"""
            
            if target_user.username:
                success_message += f" (@{target_user.username})"
                
            success_message += f"""
üÜî <b>ID:</b> <code>{target_user.telegram_id}</code>
üìÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ:</b> {subscription_until.strftime('%d.%m.%Y %H:%M')}

{"üÜï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –∏ –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø" if was_created else "‚úÖ –î–æ—Å—Ç—É–ø –æ–±–Ω–æ–≤–ª–µ–Ω"}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –∫–ª—É–±–∞."""
            
            await update.message.reply_text(success_message, parse_mode='HTML')
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É
            try:
                logger.info(f"üîß –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user.telegram_id} –≤ –≥—Ä—É–ø–ø—É")
                
                # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
                logger.info(f"üîß –ü–æ–ª—É—á–∞–µ–º settings...")
                settings = get_settings()
                logger.info(f"üîß Settings –ø–æ–ª—É—á–µ–Ω—ã: GROUP_ID={settings.GROUP_ID}")
                
                logger.info(f"üîß –°–æ–∑–¥–∞–µ–º TelegramService...")
                telegram_service = TelegramService(context.bot)
                logger.info(f"üîß TelegramService —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                
                logger.info(f"üîß –°–æ–∑–¥–∞–µ–º GroupManagementService...")
                group_service = GroupManagementService(context.bot)
                logger.info(f"üîß GroupManagementService —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É
                logger.info(f"üîß –í—ã–∑—ã–≤–∞–µ–º auto_add_paid_user_to_group –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user.telegram_id}")
                added_to_group = await group_service.auto_add_paid_user_to_group(target_user.telegram_id)
                logger.info(f"üîß auto_add_paid_user_to_group –∑–∞–≤–µ—Ä—à–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {added_to_group}")
                
                if added_to_group:
                    await update.message.reply_text("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É!", parse_mode='HTML')
                    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user.telegram_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
                else:
                    await update.message.reply_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É.", parse_mode='HTML')
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user.telegram_id} –≤ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
                
            except Exception as e:
                import traceback
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user.telegram_id} –≤ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: {e}")
                logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
                await update.message.reply_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –≥—Ä—É–ø–ø—É.", parse_mode='HTML')
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data['waiting_for_user_id'] = False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_user_id_input: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –¥–æ—Å—Ç—É–ø–∞.")
        context.user_data['waiting_for_user_id'] = False


async def admin_activity_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å' –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    try:
        query = update.callback_query
        await safe_answer_callback(query)
        
        settings = get_settings()
        user_id = query.from_user.id
        
        if user_id not in settings.admin_ids_list:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        async with get_db_session() as session:
            activity_service = ActivityService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            today = datetime.utcnow().date()
            yesterday = (datetime.utcnow() - timedelta(days=1)).date()
            week_ago = (datetime.utcnow() - timedelta(days=7)).date()
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            overall_stats = await activity_service.get_overall_activity_stats(week_ago, today)
            activity_today = await activity_service.get_activity_stats_for_date(today)
            activity_yesterday = await activity_service.get_activity_stats_for_date(yesterday)
            
            message = f"""üìà <b>–û–±—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º</b>

üìÖ <b>–°–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m.%Y')}):</b>
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {activity_today.get('messages', 0)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {activity_today.get('active_users', 0)}

üìÖ <b>–í—á–µ—Ä–∞ ({yesterday.strftime('%d.%m.%Y')}):</b>
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {activity_yesterday.get('messages', 0)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {activity_yesterday.get('active_users', 0)}

üìä <b>–ó–∞ –Ω–µ–¥–µ–ª—é (–æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞):</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {overall_stats.get('total_messages', 0)}
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {overall_stats.get('unique_users', 0)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {overall_stats.get('active_chats', 0)}

üéØ <b>–¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é:</b>
‚Ä¢ üí¨ –¢–µ–∫—Å—Ç: {overall_stats.get('message_types', {}).get('message', 0)}
‚Ä¢ üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ: {overall_stats.get('message_types', {}).get('voice', 0)}
‚Ä¢ üìπ –í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è: {overall_stats.get('message_types', {}).get('video_note', 0)}
‚Ä¢ üñºÔ∏è –§–æ—Ç–æ: {overall_stats.get('message_types', {}).get('photo', 0)}
‚Ä¢ üé¨ –í–∏–¥–µ–æ: {overall_stats.get('message_types', {}).get('video', 0)}
‚Ä¢ üéµ –ê—É–¥–∏–æ: {overall_stats.get('message_types', {}).get('audio', 0)}
‚Ä¢ üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã: {overall_stats.get('message_types', {}).get('document', 0)}
‚Ä¢ üòÄ –°—Ç–∏–∫–µ—Ä—ã: {overall_stats.get('message_types', {}).get('sticker', 0)}
‚Ä¢ üéûÔ∏è GIF: {overall_stats.get('message_types', {}).get('animation', 0)}

üë• <b>–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –Ω–µ–¥–µ–ª—é (–ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏):</b>
"""
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ —Ç–æ–ø, –∞ –≤—Å–µ—Ö)
            all_users = await activity_service.get_top_active_users(days=7, limit=100)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç
            
            if all_users:
                for i, user in enumerate(all_users, 1):
                    username = user.get('username', '')
                    username_display = f"@{username}" if username else ""
                    message += f"{i}. {user.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} {username_display} - {user.get('activity_count', 0)} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            else:
                message += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            message += f"\n‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.utcnow().strftime('%H:%M:%S')}"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
            keyboard_buttons = []
            
            # –ö–Ω–æ–ø–∫–∞ "–ü–æ —á–∞—Ç–∞–º" (–æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º)
            keyboard_buttons.append([InlineKeyboardButton("üìä –ü–æ —á–∞—Ç–∞–º", callback_data="admin_activity_by_chats")])
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
            for chat_id in settings.all_chat_ids:
                chat_name = settings.chat_names.get(chat_id, f"–ß–∞—Ç {chat_id}")
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏
                button_text = chat_name[:20] + "..." if len(chat_name) > 20 else chat_name
                keyboard_buttons.append([InlineKeyboardButton(f"üí¨ {button_text}", callback_data=f"admin_chat_activity_{chat_id}")])
            
            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            keyboard_buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏", callback_data="admin_dashboard")])
            
            keyboard = InlineKeyboardMarkup(keyboard_buttons)
            
            await query.edit_message_text(message, reply_markup=keyboard, parse_mode='HTML')
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_activity_handler: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")


async def admin_activity_by_chats_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ —á–∞—Ç–∞–º' –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
    try:
        query = update.callback_query
        await safe_answer_callback(query)
        
        user_id = update.effective_user.id
        settings = get_settings()
        
        if user_id not in settings.admin_ids_list:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        async with get_db_session() as session:
            activity_service = ActivityService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            today = datetime.utcnow().date()
            yesterday = (datetime.utcnow() - timedelta(days=1)).date()
            week_ago = (datetime.utcnow() - timedelta(days=7)).date()
            
            message = f"""üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Ç–∞–º</b>

üìÖ <b>–ü–µ—Ä–∏–æ–¥: {week_ago.strftime('%d.%m.%Y')} - {today.strftime('%d.%m.%Y')}</b>

"""
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É —á–∞—Ç—É
            for chat_id in settings.all_chat_ids:
                chat_name = settings.chat_names.get(chat_id, f"–ß–∞—Ç {chat_id}")
                chat_stats = await activity_service.get_activity_stats_by_chat(chat_id, week_ago, today)
                
                message += f"""üí¨ <b>{chat_name}</b>
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {chat_stats.get('total_messages', 0)}
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {chat_stats.get('unique_users', 0)}
‚Ä¢ –¢–æ–ø —Ç–∏–ø—ã: –¢–µ–∫—Å—Ç({chat_stats.get('message_types', {}).get('message', 0)}), –§–æ—Ç–æ({chat_stats.get('message_types', {}).get('photo', 0)}), –ì–æ–ª–æ—Å({chat_stats.get('message_types', {}).get('voice', 0)})

"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            message += f"\n‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.utcnow().strftime('%H:%M:%S')}"
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_activity")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏", callback_data="admin_dashboard")]
            ])
            
            await query.edit_message_text(message, reply_markup=keyboard, parse_mode='HTML')
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_activity_by_chats_handler: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —á–∞—Ç–∞–º.")


async def admin_chat_activity_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ."""
    try:
        query = update.callback_query
        await safe_answer_callback(query)
        
        user_id = update.effective_user.id
        settings = get_settings()
        
        if user_id not in settings.admin_ids_list:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —á–∞—Ç–∞ –∏–∑ callback_data
        callback_data = query.data
        chat_id = callback_data.replace("admin_chat_activity_", "")
        
        chat_name = settings.chat_names.get(chat_id, f"–ß–∞—Ç {chat_id}")
        
        async with get_db_session() as session:
            activity_service = ActivityService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            today = datetime.utcnow().date()
            yesterday = (datetime.utcnow() - timedelta(days=1)).date()
            week_ago = (datetime.utcnow() - timedelta(days=7)).date()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —á–∞—Ç—É
            chat_stats_dict = await activity_service.get_activity_stats_by_chat(week_ago, today)
            chat_stats = chat_stats_dict.get(chat_id, {})
            
            message = f"""üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —á–∞—Ç–µ: {chat_name}</b>

üìÖ <b>–ü–µ—Ä–∏–æ–¥: {week_ago.strftime('%d.%m.%Y')} - {today.strftime('%d.%m.%Y')}</b>

üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {chat_stats.get('total_messages', 0)}
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {chat_stats.get('unique_users', 0)}

üéØ <b>–¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π:</b>
‚Ä¢ üí¨ –¢–µ–∫—Å—Ç: {chat_stats.get('message_types', {}).get('message', 0)}
‚Ä¢ üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ: {chat_stats.get('message_types', {}).get('voice', 0)}
‚Ä¢ üìπ –í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è: {chat_stats.get('message_types', {}).get('video_note', 0)}
‚Ä¢ üñºÔ∏è –§–æ—Ç–æ: {chat_stats.get('message_types', {}).get('photo', 0)}
‚Ä¢ üé¨ –í–∏–¥–µ–æ: {chat_stats.get('message_types', {}).get('video', 0)}
‚Ä¢ üéµ –ê—É–¥–∏–æ: {chat_stats.get('message_types', {}).get('audio', 0)}
‚Ä¢ üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã: {chat_stats.get('message_types', {}).get('document', 0)}
‚Ä¢ üòÄ –°—Ç–∏–∫–µ—Ä—ã: {chat_stats.get('message_types', {}).get('sticker', 0)}
‚Ä¢ üéûÔ∏è GIF: {chat_stats.get('message_types', {}).get('animation', 0)}

üë• <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
"""
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —ç—Ç–æ–≥–æ —á–∞—Ç–∞
            chat_users = await activity_service.get_top_active_users_for_chat(chat_id, days=7, limit=50)
            
            if chat_users:
                for i, user in enumerate(chat_users, 1):
                    username = user.get('username', '')
                    username_display = f"@{username}" if username else ""
                    message += f"{i}. {user.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} {username_display} - {user.get('activity_count', 0)} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            else:
                message += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
            message += f"\n‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.utcnow().strftime('%H:%M:%S')}"
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_activity")],
                [InlineKeyboardButton("üìã –ü–æ –≤—Å–µ–º —á–∞—Ç–∞–º", callback_data="admin_activity_by_chats")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏", callback_data="admin_dashboard")]
            ])
            
            await query.edit_message_text(message, reply_markup=keyboard, parse_mode='HTML')
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_chat_activity_handler: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞.")


async def admin_refresh_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–±–Ω–æ–≤–∏—Ç—å' –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    try:
        query = update.callback_query
        await safe_answer_callback(query, "üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...")
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é –ø–∞–Ω–µ–ª—å
        await admin_dashboard_handler(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_refresh_handler: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")


async def admin_broadcast_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–†–∞—Å—Å—ã–ª–∫–∞' –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    try:
        query = update.callback_query
        await safe_answer_callback(query)
        
        settings = get_settings()
        user_id = query.from_user.id
        
        if user_id not in settings.admin_ids_list:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        message = """üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:

‚Ä¢ –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
‚Ä¢ –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–º
‚Ä¢ –¢–æ–ª—å–∫–æ premium
‚Ä¢ –ü–æ —Å—Ç–∞—Ç—É—Å—É –ø–æ–¥–ø–∏—Å–∫–∏
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üë• –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="broadcast_all")],
            [InlineKeyboardButton("‚úÖ –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–º", callback_data="broadcast_active")],
            [InlineKeyboardButton("üíé –¢–æ–ª—å–∫–æ premium", callback_data="broadcast_premium")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏", callback_data="admin_dashboard")]
        ])
        
        await query.edit_message_text(message, reply_markup=keyboard, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_broadcast_handler: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏.")


async def admin_revoke_access_by_id_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞ –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        query = update.callback_query
        await safe_answer_callback(query, "‚ùå –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞")
        
        settings = get_settings()
        user_id = query.from_user.id
        
        if user_id not in settings.admin_ids_list:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message = """‚ùå <b>–û—Ç–º–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ ID</b>

–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø.

<b>–ü—Ä–∏–º–µ—Ä:</b> <code>123456789</code>

üí° <b>–ö–∞–∫ –Ω–∞–π—Ç–∏ ID:</b>
‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –ª–æ–≥–∞—Ö –±–æ—Ç–∞

–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏"."""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏", callback_data="admin_access")]
        ])
        
        await query.edit_message_text(message, reply_markup=keyboard, parse_mode='HTML')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ ID
        context.user_data['waiting_for_revoke_user_id'] = True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_revoke_access_by_id_handler: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")


async def handle_revoke_user_id_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ ID –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞
        if not context.user_data.get('waiting_for_revoke_user_id', False):
            return
            
        user_message = update.message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
        try:
            target_user_id = int(user_message)
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n"
                "–ü—Ä–∏–º–µ—Ä: <code>123456789</code>",
                parse_mode='HTML'
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        settings = get_settings()
        admin_id = update.effective_user.id
        
        if admin_id not in settings.admin_ids_list:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            context.user_data['waiting_for_revoke_user_id'] = False
            return
        
        async with get_db_session() as session:
            user_service = UserService(session)
            
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
            target_user = await user_service.get_user_by_telegram_id(target_user_id)
            
            if not target_user:
                await update.message.reply_text(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{target_user_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n"
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—Ç—è –±—ã —Ä–∞–∑ –ø–∏—Å–∞–ª –±–æ—Ç—É.",
                    parse_mode='HTML'
                )
                context.user_data['waiting_for_revoke_user_id'] = False
                return
            
            # –û—Ç–º–µ–Ω—è–µ–º –¥–æ—Å—Ç—É–ø
            from app.schemas.user import UserUpdate
            
            await user_service.update_user(str(target_user.id), UserUpdate(
                status="pending",
                is_premium=False,
                subscription_until=None
            ))
            
            success_message = f"""‚úÖ <b>–î–æ—Å—Ç—É–ø –æ—Ç–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {target_user.first_name}
üÜî <b>ID:</b> <code>{target_user.telegram_id}</code>
üìÖ <b>–°—Ç–∞—Ç—É—Å:</b> pending (–¥–æ—Å—Ç—É–ø –æ—Ç–º–µ–Ω–µ–Ω)

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –∫–ª—É–±–∞."""
            
            await update.message.reply_text(success_message, parse_mode='HTML')
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data['waiting_for_revoke_user_id'] = False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_revoke_user_id_input: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –¥–æ—Å—Ç—É–ø–∞.")
        context.user_data['waiting_for_revoke_user_id'] = False


async def admin_management_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏."""
    try:
        query = update.callback_query
        await safe_answer_callback(query, "üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏")
        
        settings = get_settings()
        user_id = query.from_user.id
        
        if user_id not in settings.admin_ids_list:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if user_id != settings.SUPER_ADMIN_ID:
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        from app.services.admin_service import AdminService
        admin_service = AdminService()
        current_admins = await admin_service.get_current_admins()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üëë <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏</b>\n\n"
        message += "<b>–¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:</b>\n"
        
        for admin in current_admins:
            status = "üî¥ –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω" if admin['is_super_admin'] else "üü° –ê–¥–º–∏–Ω"
            message += f"‚Ä¢ ID: <code>{admin['id']}</code> - {status}\n"
        
        message += f"\n<b>–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> <code>{settings.SUPER_ADMIN_ID}</code>"
        message += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_add_admin")],
            [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_remove_admin")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏", callback_data="admin_dashboard")]
        ])
        
        await query.edit_message_text(message, reply_markup=keyboard, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_management_handler: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.")


async def admin_add_admin_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    try:
        query = update.callback_query
        await safe_answer_callback(query, "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        
        settings = get_settings()
        user_id = query.from_user.id
        
        if user_id != settings.SUPER_ADMIN_ID:
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            return
        
        message = """‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

<b>–ü—Ä–∏–º–µ—Ä:</b> <code>123456789</code>

üí° <b>–ö–∞–∫ –Ω–∞–π—Ç–∏ ID:</b>
‚Ä¢ –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É /start
‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –ª–æ–≥–∞—Ö –±–æ—Ç–∞ –∏–ª–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏

–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é"."""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="admin_management")]
        ])
        
        await query.edit_message_text(message, reply_markup=keyboard, parse_mode='HTML')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ ID
        context.user_data['waiting_for_add_admin_id'] = True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_add_admin_handler: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")


async def admin_remove_admin_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    try:
        query = update.callback_query
        await safe_answer_callback(query, "‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        
        settings = get_settings()
        user_id = query.from_user.id
        
        if user_id != settings.SUPER_ADMIN_ID:
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            return
        
        message = """‚ûñ <b>–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

–í–≤–µ–¥–∏—Ç–µ Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.

<b>–ü—Ä–∏–º–µ—Ä:</b> <code>123456789</code>

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b>
‚Ä¢ –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ–ª—å–∑—è
‚Ä¢ –£–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Ç–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏

–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é"."""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="admin_management")]
        ])
        
        await query.edit_message_text(message, reply_markup=keyboard, parse_mode='HTML')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ ID
        context.user_data['waiting_for_remove_admin_id'] = True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_remove_admin_handler: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")


async def handle_admin_id_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    try:
        logger.info(f"üîç handle_admin_id_input –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
        logger.info(f"   –°–æ—Å—Ç–æ—è–Ω–∏–µ: waiting_for_add_admin_id={context.user_data.get('waiting_for_add_admin_id', False)}")
        logger.info(f"   –°–æ—Å—Ç–æ—è–Ω–∏–µ: waiting_for_remove_admin_id={context.user_data.get('waiting_for_remove_admin_id', False)}")
        logger.info(f"   –°–æ—Å—Ç–æ—è–Ω–∏–µ: waiting_for_user_id={context.user_data.get('waiting_for_user_id', False)}")
        logger.info(f"   –°–æ—Å—Ç–æ—è–Ω–∏–µ: waiting_for_revoke_user_id={context.user_data.get('waiting_for_revoke_user_id', False)}")
        logger.info(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ ID –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
        if context.user_data.get('waiting_for_add_admin_id', False):
            await handle_add_admin_id_input(update, context)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
        if context.user_data.get('waiting_for_remove_admin_id', False):
            await handle_remove_admin_id_input(update, context)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ ID –¥–ª—è –≤—ã–¥–∞—á–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if context.user_data.get('waiting_for_user_id', False) or context.user_data.get('waiting_for_revoke_user_id', False):
            logger.info("   ‚úÖ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ handle_user_id_input")
            await handle_user_id_input(update, context)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã
        if context.user_data.get('waiting_for_group_message', False):
            logger.info("   ‚úÖ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ handle_group_message_input")
            await handle_group_message_input(update, context)
            return
        
        logger.info("   ‚ùå –ù–µ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ ID, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_admin_id_input: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")


async def handle_add_admin_id_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    try:
        user_message = update.message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
        try:
            admin_id = int(user_message)
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n"
                "–ü—Ä–∏–º–µ—Ä: <code>123456789</code>",
                parse_mode='HTML'
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        settings = get_settings()
        current_admin_id = update.effective_user.id
        
        if current_admin_id != settings.SUPER_ADMIN_ID:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            context.user_data['waiting_for_add_admin_id'] = False
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        from app.services.admin_service import AdminService
        admin_service = AdminService()
        
        result = await admin_service.add_admin(admin_id, current_admin_id)
        
        if result['success']:
            success_message = f"""‚úÖ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>

üë§ <b>ID:</b> <code>{admin_id}</code>
üìÖ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}

{result['message']}

‚úÖ <b>–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ!</b>
‚Ä¢ –ù–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
            
            await update.message.reply_text(success_message, parse_mode='HTML')
        else:
            await update.message.reply_text(f"‚ùå {result['message']}")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data['waiting_for_add_admin_id'] = False
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_add_admin_id_input: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        context.user_data['waiting_for_add_admin_id'] = False


async def handle_remove_admin_id_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    try:
        user_message = update.message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
        try:
            admin_id = int(user_message)
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"
                "–ü—Ä–∏–º–µ—Ä: <code>123456789</code>",
                parse_mode='HTML'
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        settings = get_settings()
        current_admin_id = update.effective_user.id
        
        if current_admin_id != settings.SUPER_ADMIN_ID:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            context.user_data['waiting_for_remove_admin_id'] = False
            return
        
        # –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        from app.services.admin_service import AdminService
        admin_service = AdminService()
        
        result = await admin_service.remove_admin(admin_id, current_admin_id)
        
        if result['success']:
            success_message = f"""‚úÖ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>

üë§ <b>ID:</b> <code>{admin_id}</code>
üìÖ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}

{result['message']}

‚úÖ <b>–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ!</b>
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Ç–µ—Ä—è–ª –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
            
            await update.message.reply_text(success_message, parse_mode='HTML')
        else:
            await update.message.reply_text(f"‚ùå {result['message']}")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data['waiting_for_remove_admin_id'] = False
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_remove_admin_id_input: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        context.user_data['waiting_for_remove_admin_id'] = False


async def admin_check_subscriptions_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã."""
    try:
        query = update.callback_query
        await query.answer("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        await query.edit_message_text(
            "üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã</b>\n\n"
            "‚è≥ –ò–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...\n"
            "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ–æ–ø–ª–∞—Ç–∏–≤—à–∏–º...\n"
            "‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ 3 –¥–Ω—è...",
            parse_mode='HTML'
        )
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        group_service = GroupManagementService(context.bot)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        results = await group_service.check_subscriptions_and_kick_unpaid()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report_message = f"""‚úÖ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>
‚Ä¢ üë• –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {results['total_checked']}
‚Ä¢ ‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {results['warnings_sent']}
‚Ä¢ ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {results['warnings_failed']}
‚Ä¢ üö´ –ò—Å–∫–ª—é—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {results['kicked_users']}
‚Ä¢ üîß –û—à–∏–±–æ–∫: {results['errors']}

üìã <b>–î–µ—Ç–∞–ª–∏:</b>"""

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏
        if results['details']:
            for detail in results['details'][:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                if detail.get('action') == 'warning_sent':
                    report_message += f"\n‚Ä¢ ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: @{detail.get('username', 'unknown')} (ID: {detail['user_id']})"
                elif detail.get('action') == 'warning_failed':
                    report_message += f"\n‚Ä¢ ‚ùå –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: @{detail.get('username', 'unknown')} (ID: {detail['user_id']})"
                elif detail.get('action') == 'error':
                    report_message += f"\n‚Ä¢ üîß –û—à–∏–±–∫–∞: {detail['message']}"
        
        if len(results['details']) > 10:
            report_message += f"\n‚Ä¢ ... –∏ –µ—â–µ {len(results['details']) - 10} –∑–∞–ø–∏—Å–µ–π"
        
        report_message += f"""

‚è∞ <b>–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</b> —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
üîÑ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</b> –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç

üí° <b>–í–∞–∂–Ω–æ:</b>
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç 3 –¥–Ω—è –Ω–∞ –æ–ø–ª–∞—Ç—É
‚Ä¢ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚Ä¢ –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å

üìù <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b>
‚Ä¢ "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å" = –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º
‚Ä¢ –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ Telegram API
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ —Ä–∞–≤–Ω–æ –±—É–¥–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ 3 –¥–Ω—è"""

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="admin_check_subscriptions")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        
        await query.edit_message_text(report_message, reply_markup=keyboard, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_check_subscriptions_handler: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫.")


async def admin_send_to_group_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É' –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    try:
        query = update.callback_query
        await safe_answer_callback(query)
        
        settings = get_settings()
        user_id = query.from_user.id
        
        if user_id not in settings.admin_ids_list:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        message = """üì§ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É</b>

–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞.

<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML —Ä–∞–∑–º–µ—Ç–∫–∞ (–∂–∏—Ä–Ω—ã–π, –∫—É—Ä—Å–∏–≤, —Å—Å—ã–ª–∫–∏)
‚Ä¢ –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏"

<b>–ü—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–º–µ—Ç–∫–∏:</b>
‚Ä¢ <b>–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b>
‚Ä¢ <i>–∫—É—Ä—Å–∏–≤</i>
‚Ä¢ <a href="https://example.com">—Å—Å—ã–ª–∫–∞</a>
‚Ä¢ <code>–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π</code>"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏", callback_data="admin_dashboard")]
        ])
        
        await query.edit_message_text(message, reply_markup=keyboard, parse_mode='HTML')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
        context.user_data['waiting_for_group_message'] = True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_send_to_group_handler: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")


async def handle_group_message_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É."""
    try:
        logger.info(f"üîç handle_group_message_input –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã
        if not context.user_data.get('waiting_for_group_message', False):
            logger.info("   ‚ùå –ù–µ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        
        settings = get_settings()
        user_id = update.effective_user.id
        
        if user_id not in settings.admin_ids_list:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            context.user_data['waiting_for_group_message'] = False
            return
        
        message_text = update.message.text.strip()
        
        if not message_text:
            await update.message.reply_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        try:
            telegram_service = TelegramService(context.bot)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
            await telegram_service.bot.send_message(
                chat_id=int(settings.GROUP_ID),
                text=message_text,
                parse_mode='HTML'
            )
            
            success_message = f"""‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É!</b>

üìù <b>–¢–µ–∫—Å—Ç:</b>
{message_text}

üë§ <b>–û—Ç–ø—Ä–∞–≤–∏–ª:</b> {update.effective_user.first_name}
üìÖ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}

–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≥—Ä—É–ø–ø—ã."""
            
            await update.message.reply_text(success_message, parse_mode='HTML')
            
            logger.info(f"‚úÖ –ê–¥–º–∏–Ω {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É {settings.GROUP_ID}: {message_text[:50]}...")
            
        except Exception as e:
            error_message = f"""‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è</b>

–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É.

<b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>
‚Ä¢ –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã
‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥—Ä—É–ø–ø—ã
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞

<b>–û—à–∏–±–∫–∞:</b> {str(e)}"""
            
            await update.message.reply_text(error_message, parse_mode='HTML')
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: {e}")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data['waiting_for_group_message'] = False
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_group_message_input: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        context.user_data['waiting_for_group_message'] = False
