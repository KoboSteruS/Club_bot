"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ä–∏—Ç—É–∞–ª–æ–≤ –Ø–î–†–ê.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è:
- –û—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —É—Ç—Ä–µ–Ω–Ω–∏–µ –∏ –≤–µ—á–µ—Ä–Ω–∏–µ —Ä–∏—Ç—É–∞–ª—ã
- –ö–Ω–æ–ø–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Ä–∏—Ç—É–∞–ª–æ–≤
- –¢–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Ä–∏—Ç—É–∞–ª—ã
"""

from datetime import datetime
from typing import Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler, MessageHandler, filters
from loguru import logger

from app.core.database import get_database
from app.services import UserService, RitualService, TelegramService
from app.models.ritual import ResponseType, RitualType
from app.schemas.ritual import RitualResponseCreate


async def handle_ritual_button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ —Ä–∏—Ç—É–∞–ª–∞—Ö.
    
    Callback data format: ritual_{response_type}_{ritual_id}_{user_ritual_id}
    """
    query = update.callback_query
    await query.answer()
    
    if not query.data or not query.data.startswith('ritual_'):
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º callback data
        parts = query.data.split('_')
        if len(parts) < 4:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback data: {query.data}")
            return
        
        button_type = parts[1]  # ready, reported, accepted, etc.
        ritual_id = parts[2]
        user_ritual_id = parts[3]
        
        user = query.from_user
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ä–∏—Ç—É–∞–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {button_type}")
        
        async for session in get_database():
            user_service = UserService(session)
            ritual_service = RitualService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user = await user_service.get_user_by_telegram_id(user.id)
            if not db_user:
                await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
            response_type = _get_response_type_from_button(button_type)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            response_data = RitualResponseCreate(
                user_ritual_id=user_ritual_id,
                ritual_id=ritual_id,
                response_type=response_type,
                button_clicked=button_type,
                sent_at=datetime.now()
            )
            
            await ritual_service.record_ritual_response(response_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            response_text = _get_response_confirmation(button_type, user.first_name)
            
            try:
                await query.edit_message_text(
                    text=response_text,
                    parse_mode='HTML'
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                await context.bot.send_message(
                    chat_id=user.id,
                    text=response_text,
                    parse_mode='HTML'
                )
            
            logger.info(f"–ó–∞–ø–∏—Å–∞–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–∏—Ç—É–∞–ª: {button_type} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            break  # –í—ã—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π —Å–µ—Å—Å–∏–∏
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ä–∏—Ç—É–∞–ª: {e}")
        try:
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞.")
        except:
            pass


async def handle_evening_report_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–µ—á–µ—Ä–Ω–∏–π —Ä–∏—Ç—É–∞–ª.
    
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–µ—á–µ—Ä–Ω–∏–π —Ä–∏—Ç—É–∞–ª.
    """
    message = update.message
    if not message or not message.text:
        return
    
    user = message.from_user
    text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–µ—á–µ—Ä–Ω–∏–π —Ä–∏—Ç—É–∞–ª
    # (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
    if len(text) < 10:  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç
        return
    
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        
        async for session in get_database():
            user_service = UserService(session)
            ritual_service = RitualService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user = await user_service.get_user_by_telegram_id(user.id)
            if not db_user:
                return
            
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–µ—á–µ—Ä–Ω–∏–π —Ä–∏—Ç—É–∞–ª –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # (—É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await message.reply_text(
                "‚úÖ <b>–û—Ç—á—ë—Ç –ø—Ä–∏–Ω—è—Ç!</b>\n\n"
                "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å –∏ –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å.\n"
                "üìà –ö–∞–∂–¥–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è —Å–∏–ª—å–Ω–µ–µ!\n\n"
                "üí™ –ó–∞–≤—Ç—Ä–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å ‚Äî –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞!",
                parse_mode='HTML'
            )
            
            logger.info(f"–ü—Ä–∏–Ω—è—Ç —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –æ—Ç—á—ë—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            break  # –í—ã—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π —Å–µ—Å—Å–∏–∏
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞: {e}")


def _get_response_type_from_button(button_type: str) -> ResponseType:
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –ø–æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ."""
    completed_buttons = {
        'ready', 'reported', 'accepted', 'set', 'successful'
    }
    
    skipped_buttons = {
        'sleepy', 'private', 'maybe'
    }
    
    partial_buttons = {
        'planning', 'improving'
    }
    
    if button_type in completed_buttons:
        return ResponseType.COMPLETED
    elif button_type in skipped_buttons:
        return ResponseType.SKIPPED
    elif button_type in partial_buttons:
        return ResponseType.PARTIAL
    else:
        return ResponseType.COMPLETED  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é


def _get_response_confirmation(button_type: str, user_name: Optional[str] = None) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞."""
    name = user_name or "–¥—Ä—É–≥"
    
    confirmations = {
        # –£—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–∏—Ç—É–∞–ª—ã
        'ready': f"üî• <b>–û—Ç–ª–∏—á–Ω–æ, {name}!</b>\n\n–¢–≤–æ—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –Ω–æ–≤–æ–º—É –¥–Ω—é –∑–∞–ø–∏—Å–∞–Ω–∞!\nüí™ –ò–¥–∏ –∏ –ø–æ–∫–æ—Ä—è–π —ç—Ç–æ—Ç –¥–µ–Ω—å!",
        'sleepy': f"üò¥ <b>–ü–æ–Ω–∏–º–∞—é, {name}</b>\n\n–ò–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è.\n‚òïÔ∏è –í—ã–ø–µ–π –∫–æ—Ñ–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∫ –∂–∏–∑–Ω–∏!",
        
        # –í–µ—á–µ—Ä–Ω–∏–µ —Ä–∏—Ç—É–∞–ª—ã
        'reported': f"üìù <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç—á—ë—Ç, {name}!</b>\n\n–¢–≤–æ—è —á–µ—Å—Ç–Ω–æ—Å—Ç—å —Å —Å–æ–±–æ–π ‚Äî —ç—Ç–æ –æ—Å–Ω–æ–≤–∞ —Ä–æ—Å—Ç–∞.\nüåü –ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –ª—É—á—à–µ!",
        'private': f"ü§ê <b>–ü–æ–Ω–∏–º–∞—é, {name}</b>\n\n–ò–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –≤—Ä–µ–º—è –¥–ª—è –æ—Å–º—ã—Å–ª–µ–Ω–∏—è.\nüí≠ –ì–ª–∞–≤–Ω–æ–µ ‚Äî —á—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å –æ–± —ç—Ç–æ–º!",
        
        # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã
        'accepted': f"üí™ <b>–í—ã–∑–æ–≤ –ø—Ä–∏–Ω—è—Ç, {name}!</b>\n\n–¢–µ–ø–µ—Ä—å –≥–ª–∞–≤–Ω–æ–µ ‚Äî –¥–æ–≤–µ—Å—Ç–∏ –¥–æ –∫–æ–Ω—Ü–∞!\nüèÜ –≠—Ç–∞ –Ω–µ–¥–µ–ª—è –±—É–¥–µ—Ç —Ç–≤–æ–µ–π!",
        'maybe': f"ü§î <b>–ü–æ–¥—É–º–∞–π —Ö–æ—Ä–æ—à–µ–Ω—å–∫–æ, {name}</b>\n\n–í–µ–ª–∏–∫–∏–µ –¥–µ–ª–∞ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å —Ä–µ—à–µ–Ω–∏–π.\n‚ö°Ô∏è –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å!",
        
        # –¶–µ–ª–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é
        'set': f"üéØ <b>–¶–µ–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, {name}!</b>\n\n–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å —è—Å–Ω—ã–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π.\nüìà –í—Ä–µ–º—è –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å –ø–ª–∞–Ω—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!",
        'planning': f"üìù <b>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî —ç—Ç–æ —É–∂–µ –ø–æ–ª–æ–≤–∏–Ω–∞ —É—Å–ø–µ—Ö–∞, {name}!</b>\n\n–ù–µ –∑–∞—Ç—è–≥–∏–≤–∞–π, –ª—É—á—à–∏–π –ø–ª–∞–Ω ‚Äî —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è!\n‚è∞ –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å!",
        
        # –ü—è—Ç–Ω–∏—á–Ω—ã–µ —Ä–∏—Ç—É–∞–ª—ã
        'successful': f"üèÜ <b>–û—Ç–ª–∏—á–Ω–∞—è –Ω–µ–¥–µ–ª—è, {name}!</b>\n\n–¢—ã –º–æ–∂–µ—à—å –≥–æ—Ä–¥–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏!\nüéâ –û—Ç–¥–æ—Ö–Ω–∏ –∏ –≥–æ—Ç–æ–≤—å—Å—è –∫ –Ω–æ–≤—ã–º —Å–≤–µ—Ä—à–µ–Ω–∏—è–º!",
        'improving': f"üìà <b>–û—Å–æ–∑–Ω–∞–Ω–∏–µ ‚Äî –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ —É–ª—É—á—à–µ–Ω–∏—é, {name}!</b>\n\n–ö–∞–∂–¥–∞—è –Ω–µ–¥–µ–ª—è –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è –æ–ø—ã—Ç–Ω–µ–µ.\nüí™ –°–ª–µ–¥—É—é—â–∞—è –±—É–¥–µ—Ç –µ—â—ë –ª—É—á—à–µ!"
    }
    
    return confirmations.get(button_type, f"‚úÖ <b>–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç, {name}!</b>\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–∏—Ç—É–∞–ª–µ! üôè")


# –°–æ–∑–¥–∞—ë–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
ritual_button_callback_handler = CallbackQueryHandler(
    handle_ritual_button_callback,
    pattern=r'^ritual_'
)

evening_report_text_handler = MessageHandler(
    filters.TEXT & ~filters.COMMAND,
    handle_evening_report_text
)
