"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è ClubBot.
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from loguru import logger
from datetime import date

from ...services.user_service import UserService
from ...services.report_service import ReportService
from ...services.activity_service import ActivityService, ActivityType
from ...models.report import ReportStatus
from ..keyboards.main import get_reports_keyboard


async def report_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—á–µ—Ç–æ–≤."""
    try:
        query = update.callback_query
        await query.answer()
        
        if query.data == "reports_my":
            await show_reports_menu(update, context)
        elif query.data == "report_write":
            await start_report_writing(update, context)
        elif query.data == "report_stats":
            await show_report_stats(update, context)
        elif query.data == "report_history":
            await show_report_history(update, context)
        elif query.data == "report_submit":
            await submit_report(update, context)
        elif query.data == "report_skip":
            await skip_report(update, context)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ report_handler: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def show_reports_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤."""
    try:
        user = update.effective_user
        if not user:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        user_service = UserService(context.bot_data.get('session'))
        report_service = ReportService(context.bot_data.get('session'))
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        db_user = await user_service.get_user_by_telegram_id(user.id)
        if not db_user:
            await update.callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç—á–µ—Ç–æ–≤
        stats = await report_service.get_user_activity_stats(str(db_user.id), 30)
        
        reports_text = f"""
üìä <b>–ú–æ–∏ –æ—Ç—á–µ—Ç—ã</b>

<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç—á–µ—Ç–æ–≤: {stats.get('submitted_reports', 0)}
‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ –æ—Ç—á–µ—Ç–æ–≤: {stats.get('skipped_reports', 0)}
‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: {stats.get('total_words', 0)}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {stats.get('submission_rate', 0):.1f}%

<b>–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –æ—Ç—á–µ—Ç–µ:</b> {stats.get('avg_words_per_report', 0):.0f}

<b>–ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç
‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ—Ç—á–µ—Ç–æ–≤
‚Ä¢ –ò–∑—É—á–∏—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
        
        keyboard = get_reports_keyboard()
        
        await update.callback_query.edit_message_text(
            reports_text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_reports_menu: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def start_report_writing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞."""
    try:
        user = update.effective_user
        if not user:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        user_service = UserService(context.bot_data.get('session'))
        report_service = ReportService(context.bot_data.get('session'))
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        db_user = await user_service.get_user_by_telegram_id(user.id)
        if not db_user:
            await update.callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç—á–µ—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        today_reports = await report_service.get_pending_reports(date.today())
        user_today_report = None
        
        for report in today_reports:
            if str(report.user_id) == str(db_user.id):
                user_today_report = report
                break
        
        if user_today_report:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç—á–µ—Ç
            report_text = f"""
üìù <b>–û—Ç—á–µ—Ç –Ω–∞ {date.today().strftime('%d.%m.%Y')}</b>

<b>–°—Ç–∞—Ç—É—Å:</b> {user_today_report.status_display}

<b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:</b>
{user_today_report.content or '–û—Ç—á–µ—Ç –µ—â–µ –Ω–µ –Ω–∞–ø–∏—Å–∞–Ω'}

<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤:</b> {user_today_report.word_count}

–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å –æ—Ç—á–µ—Ç–æ–º?
"""
            
            keyboard = [
                [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="report_edit")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="report_stats")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="reports_my")]
            ]
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç
            report = await report_service.create_report(
                user_id=str(db_user.id),
                report_type=ReportType.DAILY,
                report_date=date.today()
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç—á–µ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['current_report_id'] = str(report.id)
            
            report_text = f"""
üìù <b>–ù–∞–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞</b>

<b>–î–∞—Ç–∞:</b> {date.today().strftime('%d.%m.%Y')}

<b>–í—Ä–µ–º—è –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥ –¥–Ω—è</b>

–ù–∞–ø–∏—à–∏, —á—Ç–æ –ø—Ä–æ–∂–∏–ª, —á—Ç–æ –ø–æ–Ω—è–ª, –≥–¥–µ –¥–æ—Ç—è–Ω—É–ª, –≥–¥–µ —Å–¥–∞–ª—Å—è.

<b>–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ:</b>
‚Ä¢ –û—Å–æ–∑–Ω–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
‚Ä¢ –í—ã—è–≤–∏—Ç—å —Ç–æ—á–∫–∏ —Ä–æ—Å—Ç–∞
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é
‚Ä¢ –û—Å—Ç–∞—Ç—å—Å—è –≤ —Ä–∏—Ç–º–µ

<b>–ü—Ä–∏–º–µ—Ä—ã —Ç–µ–º –¥–ª—è –æ—Ç—á–µ—Ç–∞:</b>
‚Ä¢ –ß—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è?
‚Ä¢ –ö–∞–∫–∏–µ –±—ã–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏?
‚Ä¢ –ß—Ç–æ –Ω–æ–≤–æ–≥–æ —É–∑–Ω–∞–ª?
‚Ä¢ –ö–∞–∫ –ø—Ä–æ–¥–≤–∏–Ω—É–ª—Å—è –∫ —Ü–µ–ª—è–º?
‚Ä¢ –ó–∞ —á—Ç–æ –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω?

<b>–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç—á–µ—Ç:</b>
"""
            
            keyboard = [
                [InlineKeyboardButton("üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data="report_submit")],
                [InlineKeyboardButton("üòê –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="report_skip")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="reports_my")]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            report_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_report_writing: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def submit_report(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç."""
    try:
        user = update.effective_user
        if not user:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç—á–µ—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        report_id = context.user_data.get('current_report_id')
        if not report_id:
            await update.callback_query.answer("‚ùå –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        report_service = ReportService(context.bot_data.get('session'))
        activity_service = ActivityService(context.bot_data.get('session'))
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        user_service = UserService(context.bot_data.get('session'))
        db_user = await user_service.get_user_by_telegram_id(user.id)
        if not db_user:
            await update.callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–æ–¥–∞ –æ—Ç—á–µ—Ç–∞
        submit_text = """
üìù <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞</b>

–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ—à–µ–¥—à–µ–º –¥–Ω–µ.

<b>–°–æ–≤–µ—Ç—ã –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –æ—Ç—á–µ—Ç–∞:</b>
‚Ä¢ –ë—É–¥—å —á–µ—Å—Ç–Ω—ã–º —Å —Å–æ–±–æ–π
‚Ä¢ –û–ø–∏—à–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
‚Ä¢ –ü–æ–¥–µ–ª–∏—Å—å —ç–º–æ—Ü–∏—è–º–∏ –∏ –º—ã—Å–ª—è–º–∏
‚Ä¢ –û—Ç–º–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏
‚Ä¢ –ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ –∑–∞ —á—Ç–æ-—Ç–æ —Ö–æ—Ä–æ—à–µ–µ

<b>–ú–∏–Ω–∏–º—É–º:</b> 50 —Å–ª–æ–≤
<b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:</b> 100-300 —Å–ª–æ–≤

<b>–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç—á–µ—Ç:</b>
"""
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="report_write")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            submit_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
        context.user_data['waiting_for_report'] = True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ submit_report: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def skip_report(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Ç—á–µ—Ç."""
    try:
        user = update.effective_user
        if not user:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç—á–µ—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        report_id = context.user_data.get('current_report_id')
        if not report_id:
            await update.callback_query.answer("‚ùå –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        report_service = ReportService(context.bot_data.get('session'))
        activity_service = ActivityService(context.bot_data.get('session'))
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        user_service = UserService(context.bot_data.get('session'))
        db_user = await user_service.get_user_by_telegram_id(user.id)
        if not db_user:
            await update.callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç—á–µ—Ç
        await report_service.skip_report(report_id)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        await activity_service.create_activity(
            user_id=str(db_user.id),
            activity_type=ActivityType.REPORT_SUBMITTED,
            description="–û—Ç—á–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω"
        )
        
        skip_text = """
üòê <b>–û—Ç—á–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω</b>

–ü–æ–Ω–∏–º–∞–µ–º, —á—Ç–æ –∏–Ω–æ–≥–¥–∞ –±—ã–≤–∞–µ—Ç —Å–ª–æ–∂–Ω–æ –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏ –¥–Ω—è.

<b>–ü–æ–º–Ω–∏:</b> –æ—Ç—á–µ—Ç—ã –ø–æ–º–æ–≥–∞—é—Ç:
‚Ä¢ –û—Å–æ–∑–Ω–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
‚Ä¢ –í—ã—è–≤–∏—Ç—å —Ç–æ—á–∫–∏ —Ä–æ—Å—Ç–∞
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é
‚Ä¢ –û—Å—Ç–∞—Ç—å—Å—è –≤ —Ä–∏—Ç–º–µ

<b>–¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç—á–µ—Ç –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è</b>

–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?
"""
        
        keyboard = [
            [InlineKeyboardButton("üìù –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç—á–µ—Ç", callback_data="report_write")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="report_stats")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="reports_my")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            skip_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context.user_data.pop('current_report_id', None)
        context.user_data.pop('waiting_for_report', None)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ skip_report: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def show_report_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç—á–µ—Ç–æ–≤."""
    try:
        user = update.effective_user
        if not user:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        user_service = UserService(context.bot_data.get('session'))
        report_service = ReportService(context.bot_data.get('session'))
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        db_user = await user_service.get_user_by_telegram_id(user.id)
        if not db_user:
            await update.callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await report_service.get_user_activity_stats(str(db_user.id), 30)
        
        stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—á–µ—Ç–æ–≤</b>

<b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:</b>

üìù <b>–û—Ç—á–µ—Ç—ã:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats.get('submitted_reports', 0)}
‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats.get('skipped_reports', 0)}
‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total_reports', 0)}

üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {stats.get('submission_rate', 0):.1f}%
‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: {stats.get('total_words', 0)}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ —Å–ª–æ–≤ –≤ –æ—Ç—á–µ—Ç–µ: {stats.get('avg_words_per_report', 0):.0f}

<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if stats.get('submission_rate', 0) < 50:
            stats_text += "‚Ä¢ –°—Ç–∞—Ä–∞–π—Å—è –ø–∏—Å–∞—Ç—å –æ—Ç—á–µ—Ç—ã —á–∞—â–µ\n"
        elif stats.get('submission_rate', 0) < 80:
            stats_text += "‚Ä¢ –•–æ—Ä–æ—à–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ\n"
        else:
            stats_text += "‚Ä¢ –û—Ç–ª–∏—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! –¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏\n"
        
        if stats.get('avg_words_per_report', 0) < 50:
            stats_text += "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π –ø–∏—Å–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç—á–µ—Ç—ã\n"
        elif stats.get('avg_words_per_report', 0) > 300:
            stats_text += "‚Ä¢ –û—á–µ–Ω—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç—á–µ—Ç—ã! –ú–æ–ª–æ–¥–µ—Ü\n"
        else:
            stats_text += "‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç—á–µ—Ç–æ–≤\n"
        
        keyboard = [
            [InlineKeyboardButton("üìù –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç—á–µ—Ç", callback_data="report_write")],
            [InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è –æ—Ç—á–µ—Ç–æ–≤", callback_data="report_history")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="reports_my")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            stats_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_report_stats: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def show_report_history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ—Ç—á–µ—Ç–æ–≤."""
    try:
        user = update.effective_user
        if not user:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        user_service = UserService(context.bot_data.get('session'))
        report_service = ReportService(context.bot_data.get('session'))
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        db_user = await user_service.get_user_by_telegram_id(user.id)
        if not db_user:
            await update.callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã
        reports = await report_service.get_user_reports(str(db_user.id), 7)
        
        if not reports:
            history_text = """
üìã <b>–ò—Å—Ç–æ—Ä–∏—è –æ—Ç—á–µ—Ç–æ–≤</b>

<b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:</b>

üì≠ –û—Ç—á–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

<b>–ù–∞—á–Ω–∏ –ø–∏—Å–∞—Ç—å –æ—Ç—á–µ—Ç—ã, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å!</b>
"""
        else:
            history_text = """
üìã <b>–ò—Å—Ç–æ—Ä–∏—è –æ—Ç—á–µ—Ç–æ–≤</b>

<b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:</b>

"""
            
            for report in reports[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                status_emoji = "‚úÖ" if report.is_submitted else "‚è≠Ô∏è" if report.is_skipped else "‚è≥"
                history_text += f"{status_emoji} {report.report_date.strftime('%d.%m')} - {report.status_display}\n"
                
                if report.is_submitted and report.content:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤
                    preview = report.content[:50] + "..." if len(report.content) > 50 else report.content
                    history_text += f"   üìù {preview}\n"
                
                history_text += "\n"
        
        keyboard = [
            [InlineKeyboardButton("üìù –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç—á–µ—Ç", callback_data="report_write")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="report_stats")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="reports_my")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            history_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_report_history: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ (—É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞)
