"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ü–µ–ª–µ–π –¥–ª—è ClubBot.

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏ callback'–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ü–µ–ª—è–º–∏.
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from loguru import logger
from datetime import datetime, timedelta

from app.core.database import get_db_session
from app.services.user_service import UserService
from app.services.goal_service import GoalService
from app.services.activity_service import ActivityService, ActivityType
from app.schemas.goal import GoalCreate


async def goal_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è —Ü–µ–ª–µ–π.
    
    Args:
        update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    try:
        query = update.callback_query
        if not query:
            return
            
        await query.answer()
        
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback data
        callback_data = query.data
        
        if callback_data == "goals_list":
            await show_goals_list(update, context)
        elif callback_data == "goal_create":
            await start_goal_creation(update, context)
        elif callback_data == "goal_weekly":
            await show_weekly_goals(update, context)
        elif callback_data == "goal_stats":
            await show_goals_stats(update, context)
        elif callback_data.startswith("goal_complete_"):
            await complete_goal(update, context)
        elif callback_data.startswith("goal_delete_"):
            await delete_goal(update, context)
        elif callback_data == "set_goal":
            await start_goal_creation(update, context)
        elif callback_data == "skip_goal":
            await skip_goal_setting(update, context)
        else:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ goal_handler: {e}")
        if update.callback_query:
            await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def show_goals_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        user = update.effective_user
        if not user:
            return
            
        async with get_db_session() as session:
            user_service = UserService(session)
            goal_service = GoalService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
            db_user = await user_service.get_user_by_telegram_id(user.id)
            if not db_user:
                await update.callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            active_goals = await goal_service.get_user_active_goals(str(db_user.id))
            completed_goals = await goal_service.get_user_completed_goals(str(db_user.id), limit=5)
            
            goals_text = f"""
üéØ <b>–¢–≤–æ–∏ —Ü–µ–ª–∏</b>

<b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏ ({len(active_goals)}):</b>
"""
            
            if active_goals:
                for i, goal in enumerate(active_goals, 1):
                    deadline_str = ""
                    if goal.deadline:
                        days_left = (goal.deadline.date() - datetime.now().date()).days
                        if days_left > 0:
                            deadline_str = f" (–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω.)"
                        elif days_left == 0:
                            deadline_str = " (—Å–µ–≥–æ–¥–Ω—è!)"
                        else:
                            deadline_str = f" (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {abs(days_left)} –¥–Ω.)"
                    
                    goals_text += f"‚Ä¢ {goal.title}{deadline_str}\n"
            else:
                goals_text += "‚Ä¢ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π\n"
            
            goals_text += f"\n<b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–µ–¥–∞–≤–Ω–æ ({len(completed_goals)}):</b>\n"
            
            if completed_goals:
                for goal in completed_goals:
                    completed_date = goal.completed_at.strftime("%d.%m") if goal.completed_at else ""
                    goals_text += f"‚úÖ {goal.title} ({completed_date})\n"
            else:
                goals_text += "‚Ä¢ –ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π\n"
            
            goals_text += """
<b>–ü–æ–º–Ω–∏:</b> —Ü–µ–ª—å –±–µ–∑ –ø–ª–∞–Ω–∞ ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –º–µ—á—Ç–∞!

–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?
"""
            
            keyboard = [
                [InlineKeyboardButton("‚ûï –ù–æ–≤–∞—è —Ü–µ–ª—å", callback_data="goal_create")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="goal_stats")],
                [InlineKeyboardButton("üìÖ –¶–µ–ª–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é", callback_data="goal_weekly")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                goals_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_goals_list: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def start_goal_creation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–ª–∏."""
    try:
        create_text = """
üéØ <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–ª–∏</b>

<b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é —Ü–µ–ª—å:</b>
‚Ä¢ –°–¥–µ–ª–∞–π –µ—ë –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏ –∏–∑–º–µ—Ä–∏–º–æ–π
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Å—Ä–æ–∫–∏
‚Ä¢ –†–∞–∑–±–µ–π –Ω–∞ –Ω–µ–±–æ–ª—å—à–∏–µ —à–∞–≥–∏
‚Ä¢ –ó–∞–ø–∏—à–∏ –ø–ª–∞–Ω –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è

<b>–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö —Ü–µ–ª–µ–π:</b>
‚Ä¢ "–ü—Ä–æ—á–∏—Ç–∞—Ç—å 2 –∫–Ω–∏–≥–∏ –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞"
‚Ä¢ "–ó–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º 3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é"
‚Ä¢ "–í—ã—É—á–∏—Ç—å 100 –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"

<b>–ù–∞–ø–∏—à–∏ —Å–≤–æ—é —Ü–µ–ª—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.</b>

–§–æ—Ä–º–∞—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ä–æ–∫)
"""
        
        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="goals_list")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            create_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ü–µ–ª–∏
        context.user_data['waiting_for_goal'] = True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_goal_creation: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def show_weekly_goals(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ü–µ–ª–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é."""
    try:
        user = update.effective_user
        if not user:
            return
            
        async with get_db_session() as session:
            user_service = UserService(session)
            goal_service = GoalService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
            db_user = await user_service.get_user_by_telegram_id(user.id)
            if not db_user:
                await update.callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–∏ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
            week_start = datetime.now() - timedelta(days=datetime.now().weekday())
            week_end = week_start + timedelta(days=6)
            
            weekly_goals = await goal_service.get_user_goals_by_period(
                str(db_user.id), week_start, week_end
            )
            
            weekly_text = f"""
üìÖ <b>–¶–µ–ª–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é</b>

<b>–ù–µ–¥–µ–ª—è {week_start.strftime('%d.%m')} - {week_end.strftime('%d.%m')}:</b>

"""
            
            if weekly_goals:
                completed_count = sum(1 for goal in weekly_goals if goal.is_completed)
                weekly_text += f"<b>–ü—Ä–æ–≥—Ä–µ—Å—Å: {completed_count}/{len(weekly_goals)} —Ü–µ–ª–µ–π</b>\n\n"
                
                for goal in weekly_goals:
                    status = "‚úÖ" if goal.is_completed else "‚è≥"
                    weekly_text += f"{status} {goal.title}\n"
            else:
                weekly_text += "‚Ä¢ –ù–µ—Ç —Ü–µ–ª–µ–π –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é\n"
            
            weekly_text += """

<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π:</b>
‚Ä¢ 3-5 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á
‚Ä¢ 1 –±–æ–ª—å—à–∞—è —Ü–µ–ª—å
‚Ä¢ 1 –Ω–∞–≤—ã–∫ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è
‚Ä¢ 1 –ø—Ä–∏–≤—ã—á–∫–∞ –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è

<b>–ü–æ–º–Ω–∏:</b> –∫–∞–∂–¥–∞—è –Ω–µ–¥–µ–ª—è ‚Äî —ç—Ç–æ –Ω–æ–≤—ã–π —à–∞–Ω—Å —Å—Ç–∞—Ç—å –ª—É—á—à–µ!
"""
            
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å –Ω–∞ –Ω–µ–¥–µ–ª—é", callback_data="goal_create")],
                [InlineKeyboardButton("üîô –ö —Ü–µ–ª—è–º", callback_data="goals_list")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                weekly_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_weekly_goals: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def show_goals_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ü–µ–ª–µ–π."""
    try:
        user = update.effective_user
        if not user:
            return
            
        async with get_db_session() as session:
            user_service = UserService(session)
            goal_service = GoalService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
            db_user = await user_service.get_user_by_telegram_id(user.id)
            if not db_user:
                await update.callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ü–µ–ª–µ–π
            stats = await goal_service.get_user_goals_stats(str(db_user.id))
            
            stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–ª–µ–π</b>

<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ —Ü–µ–ª–µ–π: {stats.get('total_goals', 0)}
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats.get('completed_goals', 0)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats.get('active_goals', 0)}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {stats.get('completion_rate', 0):.1f}%

<b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü:</b>
‚Ä¢ –°–æ–∑–¥–∞–Ω–æ —Ü–µ–ª–µ–π: {stats.get('monthly_created', 0)}
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ü–µ–ª–µ–π: {stats.get('monthly_completed', 0)}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {stats.get('avg_completion_days', 0):.1f} –¥–Ω–µ–π

<b>–ê–Ω–∞–ª–∏–∑:</b>
"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑
            completion_rate = stats.get('completion_rate', 0)
            if completion_rate > 80:
                stats_text += "‚Ä¢ –û—Ç–ª–∏—á–Ω–∞—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å! –¢—ã —É–º–µ–µ—à—å –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ü–µ–ª–µ–π üéâ\n"
            elif completion_rate > 50:
                stats_text += "‚Ä¢ –•–æ—Ä–æ—à–∞—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ üëç\n"
            else:
                stats_text += "‚Ä¢ –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ —Ñ–æ–∫—É—Å–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ü–µ–ª–µ–π üìà\n"
            
            active_goals = stats.get('active_goals', 0)
            if active_goals > 5:
                stats_text += "‚Ä¢ –£ —Ç–µ–±—è –º–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ 3-5 –≥–ª–∞–≤–Ω—ã—Ö üéØ\n"
            elif active_goals == 0:
                stats_text += "‚Ä¢ –í—Ä–µ–º—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ü–µ–ª–∏! –ë–µ–∑ —Ü–µ–ª–µ–π –Ω–µ—Ç —Ä–æ—Å—Ç–∞ üöÄ\n"
            else:
                stats_text += "‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π üëå\n"
            
            keyboard = [
                [InlineKeyboardButton("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="goal_stats_detail")],
                [InlineKeyboardButton("üîô –ö —Ü–µ–ª—è–º", callback_data="goals_list")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                stats_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_goals_stats: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def complete_goal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–º–µ—Ç–∏—Ç—å —Ü–µ–ª—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é."""
    try:
        goal_id = update.callback_query.data.replace("goal_complete_", "")
        
        user = update.effective_user
        if not user:
            return
            
        async with get_db_session() as session:
            user_service = UserService(session)
            goal_service = GoalService(session)
            activity_service = ActivityService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
            db_user = await user_service.get_user_by_telegram_id(user.id)
            if not db_user:
                await update.callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –û—Ç–º–µ—á–∞–µ–º —Ü–µ–ª—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
            success = await goal_service.complete_goal(goal_id)
            if success:
                goal = await goal_service.get_goal_by_id(goal_id)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                await activity_service.create_activity(
                    user_id=str(db_user.id),
                    activity_type=ActivityType.GOAL_COMPLETED,
                    description=f"–¶–µ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {goal.title if goal else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ü–µ–ª—å'}"
                )
                
                complete_text = f"""
üéâ <b>–¶–µ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</b>

‚úÖ {goal.title if goal else '–¶–µ–ª—å'}

<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b> –¢—ã —Å–¥–µ–ª–∞–ª –µ—â–µ –æ–¥–∏–Ω —à–∞–≥ –∫ —Å–≤–æ–µ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é.

<b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>
‚Ä¢ –û—Ç–º–µ—Ç—å, —á—Ç–æ –ø–æ–º–æ–≥–ª–æ –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏
‚Ä¢ –ü–æ—Å—Ç–∞–≤—å –Ω–æ–≤—É—é, –±–æ–ª–µ–µ –∞–º–±–∏—Ü–∏–æ–∑–Ω—É—é —Ü–µ–ª—å
‚Ä¢ –ü–æ–¥–µ–ª–∏—Å—å —É—Å–ø–µ—Ö–æ–º —Å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º

<b>–ü–æ–º–Ω–∏:</b> –∫–∞–∂–¥–∞—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Ü–µ–ª—å –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è —Å–∏–ª—å–Ω–µ–µ! üí™
"""
                
                keyboard = [
                    [InlineKeyboardButton("‚ûï –ù–æ–≤–∞—è —Ü–µ–ª—å", callback_data="goal_create")],
                    [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="goal_stats")],
                    [InlineKeyboardButton("üéØ –í—Å–µ —Ü–µ–ª–∏", callback_data="goals_list")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.callback_query.edit_message_text(
                    complete_text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
                
                await update.callback_query.answer("üéâ –¶–µ–ª—å –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!")
            else:
                await update.callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å —Ü–µ–ª—å")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ complete_goal: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def delete_goal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å."""
    try:
        goal_id = update.callback_query.data.replace("goal_delete_", "")
        
        async with get_db_session() as session:
            goal_service = GoalService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            goal = await goal_service.get_goal_by_id(goal_id)
            if not goal:
                await update.callback_query.answer("‚ùå –¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –£–¥–∞–ª—è–µ–º —Ü–µ–ª—å
            success = await goal_service.delete_goal(goal_id)
            if success:
                await update.callback_query.answer("üóëÔ∏è –¶–µ–ª—å —É–¥–∞–ª–µ–Ω–∞")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ü–µ–ª–µ–π
                await show_goals_list(update, context)
            else:
                await update.callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ delete_goal: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def skip_goal_setting(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É —Ü–µ–ª–∏."""
    try:
        skip_text = """
‚è≠Ô∏è <b>–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω–∞</b>

–ü–æ–Ω–∏–º–∞–µ–º, —á—Ç–æ –∏–Ω–æ–≥–¥–∞ —Å–ª–æ–∂–Ω–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª—å —Å—Ä–∞–∑—É.

<b>–ü–æ–º–Ω–∏:</b> —Ü–µ–ª–∏ –ø–æ–º–æ–≥–∞—é—Ç:
‚Ä¢ –ù–∞–ø—Ä–∞–≤–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é –≤ –Ω—É–∂–Ω–æ–µ —Ä—É—Å–ª–æ
‚Ä¢ –ò–∑–º–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é
‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–≤–∏—Ç–∏–µ

<b>–¢—ã –º–æ–∂–µ—à—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è!</b>

–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?
"""
        
        keyboard = [
            [InlineKeyboardButton("üéØ –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª—å", callback_data="goal_create")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–ª–µ–π", callback_data="goal_stats")],
            [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            skip_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ skip_goal_setting: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–µ–π
async def handle_goal_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —Ü–µ–ª–∏."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ–º –ª–∏ –º—ã –≤–≤–æ–¥–∞ —Ü–µ–ª–∏
        if not context.user_data.get('waiting_for_goal'):
            return
        
        user = update.effective_user
        if not user:
            return
            
        goal_text = update.message.text.strip()
        if not goal_text:
            await update.message.reply_text("‚ùå –¶–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
            return
        
        async with get_db_session() as session:
            user_service = UserService(session)
            goal_service = GoalService(session)
            activity_service = ActivityService(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
            db_user = await user_service.get_user_by_telegram_id(user.id)
            if not db_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –°–æ–∑–¥–∞–µ–º —Ü–µ–ª—å
            goal_data = GoalCreate(
                user_id=str(db_user.id),
                title=goal_text,
                description="–¶–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞"
            )
            
            goal = await goal_service.create_goal(goal_data)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            await activity_service.create_activity(
                user_id=str(db_user.id),
                activity_type=ActivityType.GOAL_CREATED,
                description=f"–°–æ–∑–¥–∞–Ω–∞ —Ü–µ–ª—å: {goal_text}"
            )
            
            success_text = f"""
‚úÖ <b>–¶–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞!</b>

üéØ <b>–¢–≤–æ—è –Ω–æ–≤–∞—è —Ü–µ–ª—å:</b>
{goal_text}

<b>–û—Ç–ª–∏—á–Ω–æ!</b> –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å —á–µ—Ç–∫–∞—è —Ü–µ–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã.

<b>–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</b>
‚Ä¢ –†–∞–∑–±–µ–π —Ü–µ–ª—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏ —Å—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
‚Ä¢ –ù–∞—á–Ω–∏ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π –ø—Ä–æ–≥—Ä–µ—Å—Å

<b>–ü–æ–º–Ω–∏:</b> –ø—É—Ç—å –≤ —Ç—ã—Å—è—á—É –º–∏–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞! üöÄ
"""
            
            keyboard = [
                [InlineKeyboardButton("‚ûï –ï—â–µ —Ü–µ–ª—å", callback_data="goal_create")],
                [InlineKeyboardButton("üéØ –í—Å–µ —Ü–µ–ª–∏", callback_data="goals_list")],
                [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                success_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
            context.user_data.pop('waiting_for_goal', None)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_goal_input: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ü–µ–ª–∏")
        context.user_data.pop('waiting_for_goal', None)


# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ (—É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞)
