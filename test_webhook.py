#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook'–∞ CryptoBot.
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ.
"""

import asyncio
import aiohttp
import json
from datetime import datetime
from config.settings import get_settings

async def test_webhook():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook endpoint."""
    settings = get_settings()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CryptoBot
    test_payment_data = {
        "update_id": 123456789,
        "update_type": "invoice_paid",
        "request_date": datetime.now().isoformat(),
        "payload": {
            "invoice_id": "test_invoice_123",
            "status": "paid",
            "hash": "test_hash_123",
            "currency_type": "crypto",
            "asset": "USDT",
            "amount": "0.1",
            "paid_asset": "USDT",
            "paid_amount": "0.1",
            "paid_fiat_value": "0.1",
            "fiat": "USD",
            "fee_asset": "USDT",
            "fee_amount": "0.001",
            "fee_fiat_value": "0.001",
            "order_id": "test_order_123",
            "order_description": "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –∫–ª—É–±–∞ –û–°–ù–û–í–ê –ü–£–¢–ò",
            "success_asset": "USDT",
            "success_amount": "0.099",
            "success_fiat_value": "0.099",
            "created_at": datetime.now().isoformat(),
            "paid_at": datetime.now().isoformat(),
            "allow_comments": True,
            "allow_anonymous": True,
            "expiration_date": None,
            "paid_anonymously": False,
            "comment": "",
            "hidden_message": "",
            "payload": "monthly_subscription",
            "paid_btn_name": "callback",
            "paid_btn_url": "",
            "invoice_url": "https://t.me/CryptoBot?start=test_invoice_123"
        }
    }
    
    webhook_url = f"http://localhost:{settings.WEBHOOK_PORT}/webhook/cryptobot"
    
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º webhook: {webhook_url}")
    print(f"üìä –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞:")
    print(json.dumps(test_payment_data, indent=2, ensure_ascii=False))
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                webhook_url,
                json=test_payment_data,
                headers={"Content-Type": "application/json"}
            ) as response:
                print(f"\nüì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
                response_text = await response.text()
                print(f"üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response_text}")
                
                if response.status == 200:
                    print("‚úÖ Webhook —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
                else:
                    print("‚ùå Webhook –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ webhook: {e}")

async def test_health():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health endpoint."""
    settings = get_settings()
    health_url = f"http://localhost:{settings.WEBHOOK_PORT}/health"
    
    print(f"üè• –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint: {health_url}")
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(health_url) as response:
                print(f"üì° –°—Ç–∞—Ç—É—Å: {response.status}")
                response_text = await response.text()
                print(f"üìÑ –û—Ç–≤–µ—Ç: {response_text}")
                
                if response.status == 200:
                    print("‚úÖ Health endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                else:
                    print("‚ùå Health endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ health: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook —Å–µ—Ä–≤–µ—Ä–∞...\n")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º health
    await test_health()
    print("\n" + "="*50 + "\n")
    
    # –ó–∞—Ç–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º webhook
    await test_webhook()
    
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main())
