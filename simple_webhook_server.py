#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π webhook —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ CryptoBot —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
"""

import asyncio
import json
from aiohttp import web
from loguru import logger

async def cryptobot_webhook_handler(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç CryptoBot."""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω webhook –æ—Ç CryptoBot")
        
        # –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        body = await request.read()
        logger.info(f"–†–∞–∑–º–µ—Ä —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞: {len(body)} –±–∞–π—Ç")
        
        # –ü–∞—Ä—Å–∏–º JSON
        try:
            webhook_data = json.loads(body.decode('utf-8'))
            logger.info(f"–î–∞–Ω–Ω—ã–µ webhook: {webhook_data}")
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return web.Response(status=400, text="Invalid JSON")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º webhook
        update_type = webhook_data.get('update_type')
        logger.info(f"–¢–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_type}")
        
        if update_type == "invoice_paid":
            payload = webhook_data.get('payload', {})
            invoice_id = payload.get('invoice_id')
            status = payload.get('status')
            
            logger.info(f"–û–ø–ª–∞—á–µ–Ω —Å—á–µ—Ç {invoice_id} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {status}")
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            
        return web.json_response({"status": "ok"})
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return web.Response(status=500, text="Internal server error")

async def health_check(request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞."""
    return web.json_response({"status": "healthy", "service": "CryptoBot Webhook"})

async def init_app():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    app = web.Application()
    app.router.add_post('/webhook/cryptobot', cryptobot_webhook_handler)
    app.router.add_get('/health', health_check)
    return app

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ CryptoBot webhook —Å–µ—Ä–≤–µ—Ä–∞...")
    
    app = await init_app()
    runner = web.AppRunner(app)
    await runner.setup()
    
    site = web.TCPSite(runner, 'localhost', 8000)
    await site.start()
    
    logger.info("‚úÖ CryptoBot webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
    logger.info("üìã CryptoBot webhook: http://localhost:8000/webhook/cryptobot")
    
    try:
        # –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
        while True:
            await asyncio.sleep(1)
    except KeyboardInterrupt:
        logger.info("üëã –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await runner.cleanup()

if __name__ == "__main__":
    asyncio.run(main())
